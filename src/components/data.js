export const tagDict= {
    "Easy": 0, "Medium": 1, "Hard": 2, "Array": 3, "String": 4,
    "Hash Table": 5, "Dynamic Programming": 6, "Math": 7, "Sorting": 8,
    "Greedy": 9, "Depth-First Search": 10, "Binary Search": 11,
    "Database": 12, "Matrix": 13, "Breadth-First Search": 14,
    "Tree": 15, "Bit Manipulation": 16, "Two Pointers": 17,
    "Prefix Sum": 18, "Heap": 19, "Simulation": 20, "Binary Tree": 21,
    "Stack": 22, "Graph": 23, "Counting": 24, "Sliding Window": 25,
    "Design": 26, "Enumeration": 27, "Backtracking": 28, "Union Find": 29,
    "Linked List": 30, "Ordered Set": 31, "Number Theory": 32,
    "Monotonic Stack": 33, "Segment Tree": 34, "Trie": 35,
    "Combinatorics": 36, "Bitmask": 37, "Queue": 38, "Recursion": 39,
    "Divide and Conquer": 40, "Memoization": 41, "Binary Indexed Tree": 42,
    "Geometry": 43, "Binary Search Tree": 44, "Hash Function": 45,
    "String Matching": 46, "Topological Sort": 47, "Shortest Path": 48,
    "Rolling Hash": 49, "Game Theory": 50, "Interactive": 51,
    "Data Stream": 52, "Monotonic Queue": 53, "Brainteaser": 54,
    "Doubly-Linked List": 55, "Randomized": 56, "Merge Sort": 57,
    "Counting Sort": 58, "Iterator": 59, "Concurrency": 60,
    "Probability and Statistics": 61, "Quickselect": 62,
    "Suffix Array": 63, "Bucket Sort": 64, "Line Sweep": 65,
    "Minimum Spanning Tree": 66, "Shell": 67, "Reservoir Sampling": 68,
    "Strongly Connected Component": 69, "Eulerian Circuit": 70,
    "Radix Sort": 71, "Rejection Sampling": 72, "Biconnected Component": 73
  };


export const questionList= [
    {'name': 'Two Sum', 'tags': [0, 3, 5]} ,
{'name': 'Add Two Numbers', 'tags': [1, 30, 7, 39]} ,
{'name': 'Longest Substring Without Repeating Characters', 'tags': [1, 5, 4, 25]} ,
{'name': 'Median of Two Sorted Arrays', 'tags': [2, 3, 11]} ,
{'name': 'Longest Palindromic Substring', 'tags': [1, 17, 4]} ,
{'name': 'Zigzag Conversion', 'tags': [1, 4]} ,
{'name': 'Reverse Integer', 'tags': [1, 7]} ,
{'name': 'String to Integer (atoi)', 'tags': [1, 4]} ,
{'name': 'Palindrome Number', 'tags': [0, 7]} ,
{'name': 'Regular Expression Matching', 'tags': [2, 4, 6, 39]} ,
{'name': 'Container With Most Water', 'tags': [1, 3, 17, 9]} ,
{'name': 'Integer to Roman', 'tags': [1, 5, 7, 4]} ,
{'name': 'Roman to Integer', 'tags': [0, 5, 7, 4]} ,
{'name': 'Longest Common Prefix', 'tags': [0, 4, 35]} ,
{'name': '3Sum', 'tags': [1, 3, 17, 8]} ,
{'name': '3Sum Closest', 'tags': [1, 3, 17, 8]} ,
{'name': 'Letter Combinations of a Phone Number', 'tags': [1, 5, 4, 28]} ,
{'name': '4Sum', 'tags': [1, 3, 17, 8]} ,
{'name': 'Remove Nth Node From End of List', 'tags': [1, 30, 17]} ,
{'name': 'Valid Parentheses', 'tags': [0, 4, 22]} ,
{'name': 'Merge Two Sorted Lists', 'tags': [0, 30, 39]} ,
{'name': 'Generate Parentheses', 'tags': [1, 4, 6]} ,
{'name': 'Merge k Sorted Lists', 'tags': [2, 30, 40]} ,
{'name': 'Swap Nodes in Pairs', 'tags': [1, 30, 39]} ,
{'name': 'Reverse Nodes in k-Group', 'tags': [2, 30, 39]} ,
{'name': 'Remove Duplicates from Sorted Array', 'tags': [0, 3, 17]} ,
{'name': 'Remove Element', 'tags': [0, 3, 17]} ,
{'name': 'Find the Index of the First Occurrence in a String', 'tags': [0, 17, 4, 46]} ,
{'name': 'Divide Two Integers', 'tags': [1, 7, 16]} ,
{'name': 'Substring with Concatenation of All Words', 'tags': [2, 5, 4, 25]} ,
{'name': 'Next Permutation', 'tags': [1, 3, 17]} ,
{'name': 'Longest Valid Parentheses', 'tags': [2, 4, 6, 22]} ,
{'name': 'Search in Rotated Sorted Array', 'tags': [1, 3, 11]} ,
{'name': 'Find First and Last Position of Element in Sorted Array', 'tags': [1, 3, 11]} ,
{'name': 'Search Insert Position', 'tags': [0, 3, 11]} ,
{'name': 'Valid Sudoku', 'tags': [1, 3, 5, 13]} ,
{'name': 'Sudoku Solver', 'tags': [2, 3, 5, 28]} ,
{'name': 'Count and Say', 'tags': [1, 4]} ,
{'name': 'Combination Sum', 'tags': [1, 3, 28]} ,
{'name': 'Combination Sum II', 'tags': [1, 3, 28]} ,
{'name': 'First Missing Positive', 'tags': [2, 3, 5]} ,
{'name': 'Trapping Rain Water', 'tags': [2, 3, 17]} ,
{'name': 'Multiply Strings', 'tags': [1, 7, 4, 20]} ,
{'name': 'Wildcard Matching', 'tags': [2, 4, 6]} ,
{'name': 'Jump Game II', 'tags': [1, 3, 6, 9]} ,
{'name': 'Permutations', 'tags': [1, 3, 28]} ,
{'name': 'Permutations II', 'tags': [1, 3, 28]} ,
{'name': 'Rotate Image', 'tags': [1, 3, 7, 13]} ,
{'name': 'Group Anagrams', 'tags': [1, 3, 5, 4]} ,
{'name': 'Pow(x, n)', 'tags': [1, 7, 39]} ,
{'name': 'N-Queens', 'tags': [2, 3, 28]} ,
{'name': 'N-Queens II', 'tags': [2, 28]} ,
{'name': 'Maximum Subarray', 'tags': [1, 3, 40]} ,
{'name': 'Spiral Matrix', 'tags': [1, 3, 13, 20]} ,
{'name': 'Jump Game', 'tags': [1, 3, 6, 9]} ,
{'name': 'Merge Intervals', 'tags': [1, 3, 8]} ,
{'name': 'Insert Interval', 'tags': [1, 3]} ,
{'name': 'Length of Last Word', 'tags': [0, 4]} ,
{'name': 'Spiral Matrix II', 'tags': [1, 3, 13, 20]} ,
{'name': 'Permutation Sequence', 'tags': [2, 7, 39]} ,
{'name': 'Rotate List', 'tags': [1, 30, 17]} ,
{'name': 'Unique Paths', 'tags': [1, 7, 6]} ,
{'name': 'Unique Paths II', 'tags': [1, 3, 6, 13]} ,
{'name': 'Minimum Path Sum', 'tags': [1, 3, 6, 13]} ,
{'name': 'Valid Number', 'tags': [2, 4]} ,
{'name': 'Plus One', 'tags': [0, 3, 7]} ,
{'name': 'Add Binary', 'tags': [0, 7, 4, 16]} ,
{'name': 'Text Justification', 'tags': [2, 3, 4, 20]} ,
{'name': 'Sqrt(x)', 'tags': [0, 7, 11]} ,
{'name': 'Climbing Stairs', 'tags': [0, 7, 6]} ,
{'name': 'Simplify Path', 'tags': [1, 4, 22]} ,
{'name': 'Edit Distance', 'tags': [1, 4, 6]} ,
{'name': 'Set Matrix Zeroes', 'tags': [1, 3, 5, 13]} ,
{'name': 'Search a 2D Matrix', 'tags': [1, 3, 11, 13]} ,
{'name': 'Sort Colors', 'tags': [1, 3, 17, 8]} ,
{'name': 'Minimum Window Substring', 'tags': [2, 5, 4, 25]} ,
{'name': 'Combinations', 'tags': [1, 28]} ,
{'name': 'Subsets', 'tags': [1, 3, 28, 16]} ,
{'name': 'Word Search', 'tags': [1, 3, 4, 28]} ,
{'name': 'Remove Duplicates from Sorted Array II', 'tags': [1, 3, 17]} ,
{'name': 'Search in Rotated Sorted Array II', 'tags': [1, 3, 11]} ,
{'name': 'Remove Duplicates from Sorted List II', 'tags': [1, 30, 17]} ,
{'name': 'Remove Duplicates from Sorted List', 'tags': [0, 30]} ,
{'name': 'Largest Rectangle in Histogram', 'tags': [2, 3, 22, 33]} ,
{'name': 'Maximal Rectangle', 'tags': [2, 3, 6]} ,
{'name': 'Partition List', 'tags': [1, 30, 17]} ,
{'name': 'Scramble String', 'tags': [2, 4, 6]} ,
{'name': 'Merge Sorted Array', 'tags': [0, 3, 17, 8]} ,
{'name': 'Gray Code', 'tags': [1, 7, 28, 16]} ,
{'name': 'Subsets II', 'tags': [1, 3, 28, 16]} ,
{'name': 'Decode Ways', 'tags': [1, 4, 6]} ,
{'name': 'Reverse Linked List II', 'tags': [1, 30]} ,
{'name': 'Restore IP Addresses', 'tags': [1, 4, 28]} ,
{'name': 'Binary Tree Inorder Traversal', 'tags': [0, 22, 15, 10]} ,
{'name': 'Unique Binary Search Trees II', 'tags': [1, 6, 28]} ,
{'name': 'Unique Binary Search Trees', 'tags': [1, 7, 6]} ,
{'name': 'Interleaving String', 'tags': [1, 4, 6]} ,
{'name': 'Validate Binary Search Tree', 'tags': [1, 15, 10]} ,
{'name': 'Recover Binary Search Tree', 'tags': [1, 15, 10]} ,
{'name': 'Same Tree', 'tags': [0, 15, 10]} ,
{'name': 'Symmetric Tree', 'tags': [0, 15, 10]} ,
{'name': 'Binary Tree Level Order Traversal', 'tags': [1, 15, 14, 21]} ,
{'name': 'Binary Tree Zigzag Level Order Traversal', 'tags': [1, 15, 14, 21]} ,
{'name': 'Maximum Depth of Binary Tree', 'tags': [0, 15, 10]} ,
{'name': 'Construct Binary Tree from Preorder and Inorder Traversal', 'tags': [1, 3, 5]} ,
{'name': 'Construct Binary Tree from Inorder and Postorder Traversal', 'tags': [1, 3, 5]} ,
{'name': 'Binary Tree Level Order Traversal II', 'tags': [1, 15, 14, 21]} ,
{'name': 'Convert Sorted Array to Binary Search Tree', 'tags': [0, 3, 40, 15]} ,
{'name': 'Convert Sorted List to Binary Search Tree', 'tags': [1, 30, 40]} ,
{'name': 'Balanced Binary Tree', 'tags': [0, 15, 10, 21]} ,
{'name': 'Minimum Depth of Binary Tree', 'tags': [0, 15, 10]} ,
{'name': 'Path Sum', 'tags': [0, 15, 10]} ,
{'name': 'Path Sum II', 'tags': [1, 28, 15]} ,
{'name': 'Flatten Binary Tree to Linked List', 'tags': [1, 30, 22, 15]} ,
{'name': 'Distinct Subsequences', 'tags': [2, 4, 6]} ,
{'name': 'Populating Next Right Pointers in Each Node', 'tags': [1, 30, 15]} ,
{'name': 'Populating Next Right Pointers in Each Node II', 'tags': [1, 30, 15]} ,
{'name': "Pascal's Triangle", 'tags': [0, 3, 6]} ,
{'name': "Pascal's Triangle II", 'tags': [0, 3, 6]} ,
{'name': 'Triangle', 'tags': [1, 3, 6]} ,
{'name': 'Best Time to Buy and Sell Stock', 'tags': [0, 3, 6]} ,
{'name': 'Best Time to Buy and Sell Stock II', 'tags': [1, 3, 6, 9]} ,
{'name': 'Best Time to Buy and Sell Stock III', 'tags': [2, 3, 6]} ,
{'name': 'Binary Tree Maximum Path Sum', 'tags': [2, 6, 15]} ,
{'name': 'Valid Palindrome', 'tags': [0, 17, 4]} ,
{'name': 'Word Ladder II', 'tags': [2, 5, 4, 28]} ,
{'name': 'Word Ladder', 'tags': [2, 5, 4, 14]} ,
{'name': 'Longest Consecutive Sequence', 'tags': [1, 3, 5, 29]} ,
{'name': 'Sum Root to Leaf Numbers', 'tags': [1, 15, 10, 21]} ,
{'name': 'Surrounded Regions', 'tags': [1, 3, 10]} ,
{'name': 'Palindrome Partitioning', 'tags': [1, 4, 6]} ,
{'name': 'Palindrome Partitioning II', 'tags': [2, 4, 6]} ,
{'name': 'Clone Graph', 'tags': [1, 5, 10]} ,
{'name': 'Gas Station', 'tags': [1, 3, 9]} ,
{'name': 'Candy', 'tags': [2, 3, 9]} ,
{'name': 'Single Number', 'tags': [0, 3, 16]} ,
{'name': 'Single Number II', 'tags': [1, 3, 16]} ,
{'name': 'Copy List with Random Pointer', 'tags': [1, 5, 30]} ,
{'name': 'Word Break', 'tags': [1, 3, 5, 4]} ,
{'name': 'Word Break II', 'tags': [2, 3, 5, 4]} ,
{'name': 'Linked List Cycle', 'tags': [0, 5, 30, 17]} ,
{'name': 'Linked List Cycle II', 'tags': [1, 5, 30, 17]} ,
{'name': 'Reorder List', 'tags': [1, 30, 17, 22]} ,
{'name': 'Binary Tree Preorder Traversal', 'tags': [0, 22, 15, 10]} ,
{'name': 'Binary Tree Postorder Traversal', 'tags': [0, 22, 15, 10]} ,
{'name': 'LRU Cache', 'tags': [1, 5, 30, 26]} ,
{'name': 'Insertion Sort List', 'tags': [1, 30, 8]} ,
{'name': 'Sort List', 'tags': [1, 30, 17]} ,
{'name': 'Max Points on a Line', 'tags': [2, 3, 5, 7]} ,
{'name': 'Evaluate Reverse Polish Notation', 'tags': [1, 3, 7, 22]} ,
{'name': 'Reverse Words in a String', 'tags': [1, 17, 4]} ,
{'name': 'Maximum Product Subarray', 'tags': [1, 3, 6]} ,
{'name': 'Find Minimum in Rotated Sorted Array', 'tags': [1, 3, 11]} ,
{'name': 'Find Minimum in Rotated Sorted Array II', 'tags': [2, 3, 11]} ,
{'name': 'Min Stack', 'tags': [1, 22, 26]} ,
{'name': 'Binary Tree Upside Down', 'tags': [1, 15, 10, 21]} ,
{'name': 'Read N Characters Given Read4', 'tags': [0, 3, 20, 51]} ,
{'name': 'Read N Characters Given read4 II - Call Multiple Times', 'tags': [2, 3, 20, 51]} ,
{'name': 'Longest Substring with At Most Two Distinct Characters', 'tags': [1, 5, 4, 25]} ,
{'name': 'Intersection of Two Linked Lists', 'tags': [0, 5, 30, 17]} ,
{'name': 'One Edit Distance', 'tags': [1, 17, 4]} ,
{'name': 'Find Peak Element', 'tags': [1, 3, 11]} ,
{'name': 'Missing Ranges', 'tags': [0, 3]} ,
{'name': 'Maximum Gap', 'tags': [1, 3, 8, 64]} ,
{'name': 'Compare Version Numbers', 'tags': [1, 17, 4]} ,
{'name': 'Fraction to Recurring Decimal', 'tags': [1, 5, 7, 4]} ,
{'name': 'Two Sum II - Input Array Is Sorted', 'tags': [1, 3, 17, 11]} ,
{'name': 'Excel Sheet Column Title', 'tags': [0, 7, 4]} ,
{'name': 'Majority Element', 'tags': [0, 3, 5]} ,
{'name': 'Two Sum III - Data structure design', 'tags': [0, 3, 5, 17]} ,
{'name': 'Excel Sheet Column Number', 'tags': [0, 7, 4]} ,
{'name': 'Factorial Trailing Zeroes', 'tags': [1, 7]} ,
{'name': 'Binary Search Tree Iterator', 'tags': [1, 22, 15, 26]} ,
{'name': 'Dungeon Game', 'tags': [2, 3, 6, 13]} ,
{'name': 'Combine Two Tables', 'tags': [0, 12]} ,
{'name': 'Second Highest Salary', 'tags': [1, 12]} ,
{'name': 'Nth Highest Salary', 'tags': [1, 12]} ,
{'name': 'Rank Scores', 'tags': [1, 12]} ,
{'name': 'Largest Number', 'tags': [1, 3, 4, 9]} ,
{'name': 'Consecutive Numbers', 'tags': [1, 12]} ,
{'name': 'Employees Earning More Than Their Managers', 'tags': [0, 12]} ,
{'name': 'Duplicate Emails', 'tags': [0, 12]} ,
{'name': 'Customers Who Never Order', 'tags': [0, 12]} ,
{'name': 'Department Highest Salary', 'tags': [1, 12]} ,
{'name': 'Department Top Three Salaries', 'tags': [2, 12]} ,
{'name': 'Reverse Words in a String II', 'tags': [1, 17, 4]} ,
{'name': 'Repeated DNA Sequences', 'tags': [1, 5, 4]} ,
{'name': 'Best Time to Buy and Sell Stock IV', 'tags': [2, 3, 6]} ,
{'name': 'Rotate Array', 'tags': [1, 3, 7, 17]} ,
{'name': 'Reverse Bits', 'tags': [0, 40, 16]} ,
{'name': 'Number of 1 Bits', 'tags': [0, 40, 16]} ,
{'name': 'Word Frequency', 'tags': [1, 67]} ,
{'name': 'Valid Phone Numbers', 'tags': [0, 67]} ,
{'name': 'Transpose File', 'tags': [1, 67]} ,
{'name': 'Tenth Line', 'tags': [0, 67]} ,
{'name': 'Delete Duplicate Emails', 'tags': [0, 12]} ,
{'name': 'Rising Temperature', 'tags': [0, 12]} ,
{'name': 'House Robber', 'tags': [1, 3, 6]} ,
{'name': 'Binary Tree Right Side View', 'tags': [1, 15, 10]} ,
{'name': 'Number of Islands', 'tags': [1, 3, 10]} ,
{'name': 'Bitwise AND of Numbers Range', 'tags': [1, 16]} ,
{'name': 'Happy Number', 'tags': [0, 5, 7, 17]} ,
{'name': 'Remove Linked List Elements', 'tags': [0, 30, 39]} ,
{'name': 'Count Primes', 'tags': [1, 3, 7, 27]} ,
{'name': 'Isomorphic Strings', 'tags': [0, 5, 4]} ,
{'name': 'Reverse Linked List', 'tags': [0, 30, 39]} ,
{'name': 'Course Schedule', 'tags': [1, 10]} ,
{'name': 'Implement Trie (Prefix Tree)', 'tags': [1, 5, 4, 26]} ,
{'name': 'Minimum Size Subarray Sum', 'tags': [1, 3, 11]} ,
{'name': 'Course Schedule II', 'tags': [1, 10]} ,
{'name': 'Design Add and Search Words Data Structure', 'tags': [1, 4, 10, 26]} ,
{'name': 'Word Search II', 'tags': [2, 3, 4, 28]} ,
{'name': 'House Robber II', 'tags': [1, 3, 6]} ,
{'name': 'Shortest Palindrome', 'tags': [2, 4, 49]} ,
{'name': 'Kth Largest Element in an Array', 'tags': [1, 3, 40]} ,
{'name': 'Combination Sum III', 'tags': [1, 3, 28]} ,
{'name': 'Contains Duplicate', 'tags': [0, 3, 5, 8]} ,
{'name': 'The Skyline Problem', 'tags': [2, 3, 40]} ,
{'name': 'Contains Duplicate II', 'tags': [0, 3, 5, 25]} ,
{'name': 'Contains Duplicate III', 'tags': [2, 3, 25, 8]} ,
{'name': 'Maximal Square', 'tags': [1, 3, 6, 13]} ,
{'name': 'Count Complete Tree Nodes', 'tags': [0, 11, 16]} ,
{'name': 'Rectangle Area', 'tags': [1, 7, 43]} ,
{'name': 'Basic Calculator', 'tags': [2, 7, 4, 22]} ,
{'name': 'Implement Stack using Queues', 'tags': [0, 22, 26, 38]} ,
{'name': 'Invert Binary Tree', 'tags': [0, 15, 10]} ,
{'name': 'Basic Calculator II', 'tags': [1, 7, 4, 22]} ,
{'name': 'Summary Ranges', 'tags': [0, 3]} ,
{'name': 'Majority Element II', 'tags': [1, 3, 5, 8]} ,
{'name': 'Kth Smallest Element in a BST', 'tags': [1, 15, 10]} ,
{'name': 'Power of Two', 'tags': [0, 7, 16, 39]} ,
{'name': 'Implement Queue using Stacks', 'tags': [0, 22, 26, 38]} ,
{'name': 'Number of Digit One', 'tags': [2, 7, 6, 39]} ,
{'name': 'Palindrome Linked List', 'tags': [0, 30, 17, 22]} ,
{'name': 'Lowest Common Ancestor of a Binary Search Tree', 'tags': [1, 15, 10]} ,
{'name': 'Lowest Common Ancestor of a Binary Tree', 'tags': [1, 15, 10, 21]} ,
{'name': 'Delete Node in a Linked List', 'tags': [1, 30]} ,
{'name': 'Product of Array Except Self', 'tags': [1, 3, 18]} ,
{'name': 'Sliding Window Maximum', 'tags': [2, 3, 38, 25]} ,
{'name': 'Search a 2D Matrix II', 'tags': [1, 3, 11]} ,
{'name': 'Different Ways to Add Parentheses', 'tags': [1, 7, 4]} ,
{'name': 'Valid Anagram', 'tags': [0, 5, 4, 8]} ,
{'name': 'Shortest Word Distance', 'tags': [0, 3, 4]} ,
{'name': 'Shortest Word Distance II', 'tags': [1, 3, 5, 17]} ,
{'name': 'Shortest Word Distance III', 'tags': [1, 3, 4]} ,
{'name': 'Strobogrammatic Number', 'tags': [0, 5, 17, 4]} ,
{'name': 'Strobogrammatic Number II', 'tags': [1, 3, 4, 39]} ,
{'name': 'Strobogrammatic Number III', 'tags': [2, 3, 4, 39]} ,
{'name': 'Group Shifted Strings', 'tags': [1, 3, 5, 4]} ,
{'name': 'Count Univalue Subtrees', 'tags': [1, 15, 10, 21]} ,
{'name': 'Flatten 2D Vector', 'tags': [1, 3, 17, 26]} ,
{'name': 'Meeting Rooms', 'tags': [0, 3, 8]} ,
{'name': 'Meeting Rooms II', 'tags': [1, 3, 17, 9]} ,
{'name': 'Factor Combinations', 'tags': [1, 28]} ,
{'name': 'Verify Preorder Sequence in Binary Search Tree', 'tags': [1, 3, 22, 15]} ,
{'name': 'Paint House', 'tags': [1, 3, 6]} ,
{'name': 'Binary Tree Paths', 'tags': [0, 4, 28, 15]} ,
{'name': 'Add Digits', 'tags': [0, 7, 20, 32]} ,
{'name': '3Sum Smaller', 'tags': [1, 3, 17, 11]} ,
{'name': 'Single Number III', 'tags': [1, 3, 16]} ,
{'name': 'Graph Valid Tree', 'tags': [1, 10]} ,
{'name': 'Trips and Users', 'tags': [2, 12]} ,
{'name': 'Ugly Number', 'tags': [0, 7]} ,
{'name': 'Ugly Number II', 'tags': [1, 5, 7]} ,
{'name': 'Paint House II', 'tags': [2, 3, 6]} ,
{'name': 'Palindrome Permutation', 'tags': [0, 5, 4, 16]} ,
{'name': 'Palindrome Permutation II', 'tags': [1, 5, 4, 28]} ,
{'name': 'Missing Number', 'tags': [0, 3, 5, 7]} ,
{'name': 'Alien Dictionary', 'tags': [2, 3, 4, 10]} ,
{'name': 'Closest Binary Search Tree Value', 'tags': [0, 11, 15]} ,
{'name': 'Encode and Decode Strings', 'tags': [1, 3, 4, 26]} ,
{'name': 'Closest Binary Search Tree Value II', 'tags': [2, 17, 22, 15]} ,
{'name': 'Integer to English Words', 'tags': [2, 7, 4, 39]} ,
{'name': 'H-Index', 'tags': [1, 3, 8, 58]} ,
{'name': 'H-Index II', 'tags': [1, 3, 11]} ,
{'name': 'Paint Fence', 'tags': [1, 6]} ,
{'name': 'Find the Celebrity', 'tags': [1, 17, 23, 51]} ,
{'name': 'First Bad Version', 'tags': [0, 11, 51]} ,
{'name': 'Perfect Squares', 'tags': [1, 7, 6]} ,
{'name': 'Wiggle Sort', 'tags': [1, 3, 9, 8]} ,
{'name': 'Zigzag Iterator', 'tags': [1, 3, 26, 38]} ,
{'name': 'Expression Add Operators', 'tags': [2, 7, 4, 28]} ,
{'name': 'Move Zeroes', 'tags': [0, 3, 17]} ,
{'name': 'Peeking Iterator', 'tags': [1, 3, 26, 59]} ,
{'name': 'Inorder Successor in BST', 'tags': [1, 15, 10]} ,
{'name': 'Walls and Gates', 'tags': [1, 3, 14, 13]} ,
{'name': 'Find the Duplicate Number', 'tags': [1, 3, 17, 11]} ,
{'name': 'Unique Word Abbreviation', 'tags': [1, 3, 5, 4]} ,
{'name': 'Game of Life', 'tags': [1, 3, 13, 20]} ,
{'name': 'Word Pattern', 'tags': [0, 5, 4]} ,
{'name': 'Word Pattern II', 'tags': [1, 5, 4, 28]} ,
{'name': 'Nim Game', 'tags': [0, 7, 54, 50]} ,
{'name': 'Flip Game', 'tags': [0, 4]} ,
{'name': 'Flip Game II', 'tags': [1, 7, 6]} ,
{'name': 'Find Median from Data Stream', 'tags': [2, 17, 26, 8]} ,
{'name': 'Best Meeting Point', 'tags': [2, 3, 7, 8]} ,
{'name': 'Serialize and Deserialize Binary Tree', 'tags': [2, 4, 15, 10]} ,
{'name': 'Binary Tree Longest Consecutive Sequence', 'tags': [1, 15, 10, 21]} ,
{'name': 'Bulls and Cows', 'tags': [1, 5, 4, 24]} ,
{'name': 'Longest Increasing Subsequence', 'tags': [1, 3, 11]} ,
{'name': 'Remove Invalid Parentheses', 'tags': [2, 4, 28]} ,
{'name': 'Smallest Rectangle Enclosing Black Pixels', 'tags': [2, 3, 11]} ,
{'name': 'Range Sum Query - Immutable', 'tags': [0, 3, 26, 18]} ,
{'name': 'Range Sum Query 2D - Immutable', 'tags': [1, 3, 26, 13]} ,
{'name': 'Number of Islands II', 'tags': [2, 3, 5, 29]} ,
{'name': 'Additive Number', 'tags': [1, 4, 28]} ,
{'name': 'Range Sum Query - Mutable', 'tags': [1, 3, 26, 42]} ,
{'name': 'Range Sum Query 2D - Mutable', 'tags': [2, 3, 26, 42]} ,
{'name': 'Best Time to Buy and Sell Stock with Cooldown', 'tags': [1, 3, 6]} ,
{'name': 'Minimum Height Trees', 'tags': [1, 10]} ,
{'name': 'Sparse Matrix Multiplication', 'tags': [1, 3, 5, 13]} ,
{'name': 'Burst Balloons', 'tags': [2, 3, 6]} ,
{'name': 'Super Ugly Number', 'tags': [1, 3, 7, 6]} ,
{'name': 'Binary Tree Vertical Order Traversal', 'tags': [1, 5, 15]} ,
{'name': 'Count of Smaller Numbers After Self', 'tags': [2, 3, 11]} ,
{'name': 'Remove Duplicate Letters', 'tags': [1, 4, 22, 9]} ,
{'name': 'Shortest Distance from All Buildings', 'tags': [2, 3, 14, 13]} ,
{'name': 'Maximum Product of Word Lengths', 'tags': [1, 3, 4, 16]} ,
{'name': 'Bulb Switcher', 'tags': [1, 7, 54]} ,
{'name': 'Generalized Abbreviation', 'tags': [1, 4, 28, 16]} ,
{'name': 'Create Maximum Number', 'tags': [2, 3, 17, 22]} ,
{'name': 'Coin Change', 'tags': [1, 3, 6]} ,
{'name': 'Number of Connected Components in an Undirected Graph', 'tags': [1, 10]} ,
{'name': 'Wiggle Sort II', 'tags': [1, 3, 40]} ,
{'name': 'Maximum Size Subarray Sum Equals k', 'tags': [1, 3, 5, 18]} ,
{'name': 'Power of Three', 'tags': [0, 7, 39]} ,
{'name': 'Count of Range Sum', 'tags': [2, 3, 11]} ,
{'name': 'Odd Even Linked List', 'tags': [1, 30]} ,
{'name': 'Longest Increasing Path in a Matrix', 'tags': [2, 3, 6]} ,
{'name': 'Patching Array', 'tags': [2, 3, 9]} ,
{'name': 'Verify Preorder Serialization of a Binary Tree', 'tags': [1, 4, 22, 15]} ,
{'name': 'Reconstruct Itinerary', 'tags': [2, 10, 23]} ,
{'name': 'Largest BST Subtree', 'tags': [1, 6, 15]} ,
{'name': 'Increasing Triplet Subsequence', 'tags': [1, 3, 9]} ,
{'name': 'Self Crossing', 'tags': [2, 3, 7, 43]} ,
{'name': 'Palindrome Pairs', 'tags': [2, 3, 5, 4]} ,
{'name': 'House Robber III', 'tags': [1, 6, 15]} ,
{'name': 'Counting Bits', 'tags': [0, 6, 16]} ,
{'name': 'Nested List Weight Sum', 'tags': [1, 10, 14]} ,
{'name': 'Longest Substring with At Most K Distinct Characters', 'tags': [1, 5, 4, 25]} ,
{'name': 'Flatten Nested List Iterator', 'tags': [1, 22, 15, 10]} ,
{'name': 'Power of Four', 'tags': [0, 7, 16, 39]} ,
{'name': 'Integer Break', 'tags': [1, 7, 6]} ,
{'name': 'Reverse String', 'tags': [0, 17, 4]} ,
{'name': 'Reverse Vowels of a String', 'tags': [0, 17, 4]} ,
{'name': 'Moving Average from Data Stream', 'tags': [0, 3, 26, 38]} ,
{'name': 'Top K Frequent Elements', 'tags': [1, 3, 5]} ,
{'name': 'Design Tic-Tac-Toe', 'tags': [1, 3, 5, 26]} ,
{'name': 'Intersection of Two Arrays', 'tags': [0, 3, 5, 17]} ,
{'name': 'Intersection of Two Arrays II', 'tags': [0, 3, 5, 17]} ,
{'name': 'Android Unlock Patterns', 'tags': [1, 6, 28]} ,
{'name': 'Data Stream as Disjoint Intervals', 'tags': [2, 11, 26, 31]} ,
{'name': 'Design Snake Game', 'tags': [1, 3, 5, 26]} ,
{'name': 'Russian Doll Envelopes', 'tags': [2, 3, 11]} ,
{'name': 'Design Twitter', 'tags': [1, 5, 30, 26]} ,
{'name': 'Line Reflection', 'tags': [1, 3, 5, 7]} ,
{'name': 'Count Numbers with Unique Digits', 'tags': [1, 7, 6]} ,
{'name': 'Rearrange String k Distance Apart', 'tags': [2, 5, 4, 9]} ,
{'name': 'Logger Rate Limiter', 'tags': [0, 5, 26, 52]} ,
{'name': 'Sort Transformed Array', 'tags': [1, 3, 7, 17]} ,
{'name': 'Bomb Enemy', 'tags': [1, 3, 6, 13]} ,
{'name': 'Design Hit Counter', 'tags': [1, 3, 11, 26]} ,
{'name': 'Max Sum of Rectangle No Larger Than K', 'tags': [2, 3, 11, 13]} ,
{'name': 'Nested List Weight Sum II', 'tags': [1, 22, 10]} ,
{'name': 'Water and Jug Problem', 'tags': [1, 7, 10]} ,
{'name': 'Find Leaves of Binary Tree', 'tags': [1, 15, 10, 21]} ,
{'name': 'Valid Perfect Square', 'tags': [0, 7, 11]} ,
{'name': 'Largest Divisible Subset', 'tags': [1, 3, 7]} ,
{'name': 'Plus One Linked List', 'tags': [1, 30, 7]} ,
{'name': 'Range Addition', 'tags': [1, 3, 18]} ,
{'name': 'Sum of Two Integers', 'tags': [1, 7, 16]} ,
{'name': 'Super Pow', 'tags': [1, 7, 40]} ,
{'name': 'Find K Pairs with Smallest Sums', 'tags': [1, 3]} ,
{'name': 'Guess Number Higher or Lower', 'tags': [0, 11, 51]} ,
{'name': 'Guess Number Higher or Lower II', 'tags': [1, 7, 6]} ,
{'name': 'Wiggle Subsequence', 'tags': [1, 3, 6, 9]} ,
{'name': 'Combination Sum IV', 'tags': [1, 3, 6]} ,
{'name': 'Kth Smallest Element in a Sorted Matrix', 'tags': [1, 3, 11, 8]} ,
{'name': 'Design Phone Directory', 'tags': [1, 3, 5, 30]} ,
{'name': 'Insert Delete GetRandom O(1)', 'tags': [1, 3, 5, 7]} ,
{'name': 'Insert Delete GetRandom O(1) - Duplicates allowed', 'tags': [2, 3, 5, 7]} ,
{'name': 'Linked List Random Node', 'tags': [1, 30, 7]} ,
{'name': 'Ransom Note', 'tags': [0, 5, 4, 24]} ,
{'name': 'Shuffle an Array', 'tags': [1, 3, 7, 56]} ,
{'name': 'Mini Parser', 'tags': [1, 4, 22, 10]} ,
{'name': 'Lexicographical Numbers', 'tags': [1, 10, 35]} ,
{'name': 'First Unique Character in a String', 'tags': [0, 5, 4, 38]} ,
{'name': 'Longest Absolute File Path', 'tags': [1, 4, 22, 10]} ,
{'name': 'Find the Difference', 'tags': [0, 5, 4]} ,
{'name': 'Elimination Game', 'tags': [1, 7, 39]} ,
{'name': 'Perfect Rectangle', 'tags': [2, 3, 65]} ,
{'name': 'Is Subsequence', 'tags': [0, 17, 4]} ,
{'name': 'UTF-8 Validation', 'tags': [1, 3, 16]} ,
{'name': 'Decode String', 'tags': [1, 4, 22, 39]} ,
{'name': 'Longest Substring with At Least K Repeating Characters', 'tags': [1, 5, 4]} ,
{'name': 'Rotate Function', 'tags': [1, 3, 7, 6]} ,
{'name': 'Integer Replacement', 'tags': [1, 6, 9]} ,
{'name': 'Random Pick Index', 'tags': [1, 5, 7]} ,
{'name': 'Evaluate Division', 'tags': [1, 3, 4, 10]} ,
{'name': 'Nth Digit', 'tags': [1, 7, 11]} ,
{'name': 'Binary Watch', 'tags': [0, 28, 16]} ,
{'name': 'Remove K Digits', 'tags': [1, 4, 22, 9]} ,
{'name': 'Frog Jump', 'tags': [2, 3, 6]} ,
{'name': 'Sum of Left Leaves', 'tags': [0, 15, 10]} ,
{'name': 'Convert a Number to Hexadecimal', 'tags': [0, 7, 16]} ,
{'name': 'Queue Reconstruction by Height', 'tags': [1, 3, 42]} ,
{'name': 'Trapping Rain Water II', 'tags': [2, 3, 14]} ,
{'name': 'Valid Word Abbreviation', 'tags': [0, 17, 4]} ,
{'name': 'Longest Palindrome', 'tags': [0, 5, 4, 9]} ,
{'name': 'Split Array Largest Sum', 'tags': [2, 3, 11]} ,
{'name': 'Minimum Unique Word Abbreviation', 'tags': [2, 3, 4, 28]} ,
{'name': 'Fizz Buzz', 'tags': [0, 7, 4, 20]} ,
{'name': 'Arithmetic Slices', 'tags': [1, 3, 6]} ,
{'name': 'Third Maximum Number', 'tags': [0, 3, 8]} ,
{'name': 'Add Strings', 'tags': [0, 7, 4, 20]} ,
{'name': 'Partition Equal Subset Sum', 'tags': [1, 3, 6]} ,
{'name': 'Pacific Atlantic Water Flow', 'tags': [1, 3, 10]} ,
{'name': 'Sentence Screen Fitting', 'tags': [1, 3, 4, 6]} ,
{'name': 'Battleships in a Board', 'tags': [1, 3, 10, 13]} ,
{'name': 'Strong Password Checker', 'tags': [2, 4, 9]} ,
{'name': 'Maximum XOR of Two Numbers in an Array', 'tags': [1, 3, 5]} ,
{'name': 'Valid Word Square', 'tags': [0, 3, 13]} ,
{'name': 'Reconstruct Original Digits from English', 'tags': [1, 5, 7, 4]} ,
{'name': 'Longest Repeating Character Replacement', 'tags': [1, 5, 4, 25]} ,
{'name': 'Word Squares', 'tags': [2, 3, 4, 28]} ,
{'name': 'Convert Binary Search Tree to Sorted Doubly Linked List', 'tags': [1, 30, 22, 15]} ,
{'name': 'Construct Quad Tree', 'tags': [1, 3, 40, 15]} ,
{'name': 'Serialize and Deserialize N-ary Tree', 'tags': [2, 4, 15, 10]} ,
{'name': 'N-ary Tree Level Order Traversal', 'tags': [1, 15, 14]} ,
{'name': 'Flatten a Multilevel Doubly Linked List', 'tags': [1, 30, 10]} ,
{'name': 'Encode N-ary Tree to Binary Tree', 'tags': [2, 15, 10]} ,
{'name': 'All O`one Data Structure', 'tags': [2, 5, 30, 26]} ,
{'name': 'Minimum Genetic Mutation', 'tags': [1, 5, 4, 14]} ,
{'name': 'Number of Segments in a String', 'tags': [0, 4]} ,
{'name': 'Non-overlapping Intervals', 'tags': [1, 3, 6]} ,
{'name': 'Find Right Interval', 'tags': [1, 3, 11, 8]} ,
{'name': 'Path Sum III', 'tags': [1, 15, 10, 21]} ,
{'name': 'Find All Anagrams in a String', 'tags': [1, 5, 4, 25]} ,
{'name': 'Ternary Expression Parser', 'tags': [1, 4, 22, 39]} ,
{'name': 'K-th Smallest in Lexicographical Order', 'tags': [2, 35]} ,
{'name': 'Arranging Coins', 'tags': [0, 7, 11]} ,
{'name': 'Find All Duplicates in an Array', 'tags': [1, 3, 5]} ,
{'name': 'String Compression', 'tags': [1, 17, 4]} ,
{'name': 'Sequence Reconstruction', 'tags': [1, 3, 23, 47]} ,
{'name': 'Add Two Numbers II', 'tags': [1, 30, 7, 22]} ,
{'name': 'Arithmetic Slices II - Subsequence', 'tags': [2, 3, 6]} ,
{'name': 'Number of Boomerangs', 'tags': [1, 3, 5, 7]} ,
{'name': 'Find All Numbers Disappeared in an Array', 'tags': [0, 3, 5]} ,
{'name': 'Serialize and Deserialize BST', 'tags': [1, 4, 15, 10]} ,
{'name': 'Delete Node in a BST', 'tags': [1, 15, 44, 21]} ,
{'name': 'Sort Characters By Frequency', 'tags': [1, 5, 4, 8]} ,
{'name': 'Minimum Number of Arrows to Burst Balloons', 'tags': [1, 3, 9, 8]} ,
{'name': 'Minimum Moves to Equal Array Elements', 'tags': [1, 3, 7]} ,
{'name': '4Sum II', 'tags': [1, 3, 5]} ,
{'name': 'Assign Cookies', 'tags': [0, 3, 17, 9]} ,
{'name': '132 Pattern', 'tags': [1, 3, 11, 22]} ,
{'name': 'Circular Array Loop', 'tags': [1, 3, 5, 17]} ,
{'name': 'Poor Pigs', 'tags': [2, 7, 6]} ,
{'name': 'Repeated Substring Pattern', 'tags': [0, 4, 46]} ,
{'name': 'LFU Cache', 'tags': [2, 5, 30, 26]} ,
{'name': 'Hamming Distance', 'tags': [0, 16]} ,
{'name': 'Minimum Moves to Equal Array Elements II', 'tags': [1, 3, 7, 8]} ,
{'name': 'Island Perimeter', 'tags': [0, 3, 10]} ,
{'name': 'Can I Win', 'tags': [1, 7, 6]} ,
{'name': 'Optimal Account Balancing', 'tags': [2, 3, 6]} ,
{'name': 'Count The Repetitions', 'tags': [2, 4, 6]} ,
{'name': 'Unique Substrings in Wraparound String', 'tags': [1, 4, 6]} ,
{'name': 'Validate IP Address', 'tags': [1, 4]} ,
{'name': 'Convex Polygon', 'tags': [1, 3, 7, 43]} ,
{'name': 'Implement Rand10() Using Rand7()', 'tags': [1, 7, 72]} ,
{'name': 'Encode String with Shortest Length', 'tags': [2, 4, 6]} ,
{'name': 'Concatenated Words', 'tags': [2, 3, 4]} ,
{'name': 'Matchsticks to Square', 'tags': [1, 3, 6]} ,
{'name': 'Ones and Zeroes', 'tags': [1, 3, 4, 6]} ,
{'name': 'Heaters', 'tags': [1, 3, 17, 11]} ,
{'name': 'Number Complement', 'tags': [0, 16]} ,
{'name': 'Total Hamming Distance', 'tags': [1, 3, 7, 16]} ,
{'name': 'Generate Random Point in a Circle', 'tags': [1, 7, 43]} ,
{'name': 'Largest Palindrome Product', 'tags': [2, 7, 27]} ,
{'name': 'Sliding Window Median', 'tags': [2, 3, 5, 25]} ,
{'name': 'Magical String', 'tags': [1, 17, 4]} ,
{'name': 'License Key Formatting', 'tags': [0, 4]} ,
{'name': 'Smallest Good Base', 'tags': [2, 7, 11]} ,
{'name': 'Find Permutation', 'tags': [1, 3, 4, 22]} ,
{'name': 'Max Consecutive Ones', 'tags': [0, 3]} ,
{'name': 'Predict the Winner', 'tags': [1, 3, 7]} ,
{'name': 'Max Consecutive Ones II', 'tags': [1, 3, 6]} ,
{'name': 'Zuma Game', 'tags': [2, 4, 6]} ,
{'name': 'Robot Room Cleaner', 'tags': [2, 28, 51]} ,
{'name': 'The Maze', 'tags': [1, 3, 10]} ,
{'name': 'Non-decreasing Subsequences', 'tags': [1, 3, 5, 28]} ,
{'name': 'Construct the Rectangle', 'tags': [0, 7]} ,
{'name': 'Reverse Pairs', 'tags': [2, 3, 11]} ,
{'name': 'Target Sum', 'tags': [1, 3, 6]} ,
{'name': 'Teemo Attacking', 'tags': [0, 3, 20]} ,
{'name': 'Next Greater Element I', 'tags': [0, 3, 5, 22]} ,
{'name': 'Random Point in Non-overlapping Rectangles', 'tags': [1, 3, 7, 11]} ,
{'name': 'Diagonal Traverse', 'tags': [1, 3, 13, 20]} ,
{'name': 'The Maze III', 'tags': [2, 3, 4, 10]} ,
{'name': 'Keyboard Row', 'tags': [0, 3, 5, 4]} ,
{'name': 'Find Mode in Binary Search Tree', 'tags': [0, 15, 10]} ,
{'name': 'IPO', 'tags': [2, 3, 9, 8]} ,
{'name': 'Next Greater Element II', 'tags': [1, 3, 22, 33]} ,
{'name': 'Base 7', 'tags': [0, 7]} ,
{'name': 'The Maze II', 'tags': [1, 3, 10]} ,
{'name': 'Relative Ranks', 'tags': [0, 3, 8]} ,
{'name': 'Perfect Number', 'tags': [0, 7]} ,
{'name': 'Most Frequent Subtree Sum', 'tags': [1, 5, 15]} ,
{'name': 'Fibonacci Number', 'tags': [0, 7, 6]} ,
{'name': 'Inorder Successor in BST II', 'tags': [1, 15, 44, 21]} ,
{'name': 'Game Play Analysis I', 'tags': [0, 12]} ,
{'name': 'Game Play Analysis II', 'tags': [0, 12]} ,
{'name': 'Find Bottom Left Tree Value', 'tags': [1, 15, 10]} ,
{'name': 'Freedom Trail', 'tags': [2, 4, 6]} ,
{'name': 'Find Largest Value in Each Tree Row', 'tags': [1, 15, 10]} ,
{'name': 'Longest Palindromic Subsequence', 'tags': [1, 4, 6]} ,
{'name': 'Super Washing Machines', 'tags': [2, 3, 9]} ,
{'name': 'Coin Change II', 'tags': [1, 3, 6]} ,
{'name': 'Random Flip Matrix', 'tags': [1, 5, 7]} ,
{'name': 'Detect Capital', 'tags': [0, 4]} ,
{'name': 'Longest Uncommon Subsequence I', 'tags': [0, 4]} ,
{'name': 'Longest Uncommon Subsequence II', 'tags': [1, 3, 5, 17]} ,
{'name': 'Continuous Subarray Sum', 'tags': [1, 3, 5, 7]} ,
{'name': 'Longest Word in Dictionary through Deleting', 'tags': [1, 3, 17, 4]} ,
{'name': 'Contiguous Array', 'tags': [1, 3, 5, 18]} ,
{'name': 'Beautiful Arrangement', 'tags': [1, 3, 6]} ,
{'name': 'Word Abbreviation', 'tags': [2, 3, 4, 9]} ,
{'name': 'Random Pick with Weight', 'tags': [1, 3, 7, 11]} ,
{'name': 'Minesweeper', 'tags': [1, 3, 10]} ,
{'name': 'Minimum Absolute Difference in BST', 'tags': [0, 15, 10]} ,
{'name': 'Lonely Pixel I', 'tags': [1, 3, 5, 13]} ,
{'name': 'K-diff Pairs in an Array', 'tags': [1, 3, 5, 17]} ,
{'name': 'Lonely Pixel II', 'tags': [1, 3, 5, 13]} ,
{'name': 'Game Play Analysis III', 'tags': [1, 12]} ,
{'name': 'Encode and Decode TinyURL', 'tags': [1, 5, 4, 26]} ,
{'name': 'Construct Binary Tree from String', 'tags': [1, 4, 22, 15]} ,
{'name': 'Complex Number Multiplication', 'tags': [1, 7, 4, 20]} ,
{'name': 'Convert BST to Greater Tree', 'tags': [1, 15, 10]} ,
{'name': 'Minimum Time Difference', 'tags': [1, 3, 7, 4]} ,
{'name': 'Single Element in a Sorted Array', 'tags': [1, 3, 11]} ,
{'name': 'Reverse String II', 'tags': [0, 17, 4]} ,
{'name': '01 Matrix', 'tags': [1, 3, 6]} ,
{'name': 'Diameter of Binary Tree', 'tags': [0, 15, 10, 21]} ,
{'name': 'Output Contest Matches', 'tags': [1, 4, 39, 20]} ,
{'name': 'Boundary of Binary Tree', 'tags': [1, 15, 10, 21]} ,
{'name': 'Remove Boxes', 'tags': [2, 3, 6]} ,
{'name': 'Number of Provinces', 'tags': [1, 10]} ,
{'name': 'Split Array with Equal Sum', 'tags': [2, 3, 5, 18]} ,
{'name': 'Binary Tree Longest Consecutive Sequence II', 'tags': [1, 15, 10, 21]} ,
{'name': 'Game Play Analysis IV', 'tags': [1, 12]} ,
{'name': 'Student Attendance Record I', 'tags': [0, 4]} ,
{'name': 'Student Attendance Record II', 'tags': [2, 6]} ,
{'name': 'Optimal Division', 'tags': [1, 3, 7, 6]} ,
{'name': 'Brick Wall', 'tags': [1, 3, 5]} ,
{'name': 'Split Concatenated Strings', 'tags': [1, 3, 4, 9]} ,
{'name': 'Next Greater Element III', 'tags': [1, 7, 17, 4]} ,
{'name': 'Reverse Words in a String III', 'tags': [0, 17, 4]} ,
{'name': 'Logical OR of Two Binary Grids Represented as Quad-Trees', 'tags': [1, 40, 15]} ,
{'name': 'Maximum Depth of N-ary Tree', 'tags': [0, 15, 10]} ,
{'name': 'Subarray Sum Equals K', 'tags': [1, 3, 5, 18]} ,
{'name': 'Array Partition', 'tags': [0, 3, 9, 8]} ,
{'name': 'Longest Line of Consecutive One in Matrix', 'tags': [1, 3, 6, 13]} ,
{'name': 'Binary Tree Tilt', 'tags': [0, 15, 10, 21]} ,
{'name': 'Find the Closest Palindrome', 'tags': [2, 7, 4]} ,
{'name': 'Array Nesting', 'tags': [1, 3, 10]} ,
{'name': 'Reshape the Matrix', 'tags': [0, 3, 13, 20]} ,
{'name': 'Permutation in String', 'tags': [1, 5, 17, 4]} ,
{'name': 'Maximum Vacation Days', 'tags': [2, 3, 6, 13]} ,
{'name': 'Median Employee Salary', 'tags': [2, 12]} ,
{'name': 'Managers with at Least 5 Direct Reports', 'tags': [1, 12]} ,
{'name': 'Find Median Given Frequency of Numbers', 'tags': [2, 12]} ,
{'name': 'Subtree of Another Tree', 'tags': [0, 15, 10]} ,
{'name': 'Squirrel Simulation', 'tags': [1, 3, 7]} ,
{'name': 'Winning Candidate', 'tags': [1, 12]} ,
{'name': 'Distribute Candies', 'tags': [0, 3, 5]} ,
{'name': 'Out of Boundary Paths', 'tags': [1, 6]} ,
{'name': 'Employee Bonus', 'tags': [0, 12]} ,
{'name': 'Get Highest Answer Rate Question', 'tags': [1, 12]} ,
{'name': 'Find Cumulative Salary of an Employee', 'tags': [2, 12]} ,
{'name': 'Count Student Number in Departments', 'tags': [1, 12]} ,
{'name': 'Shortest Unsorted Continuous Subarray', 'tags': [1, 3, 17, 22]} ,
{'name': 'Kill Process', 'tags': [1, 3, 5, 15]} ,
{'name': 'Delete Operation for Two Strings', 'tags': [1, 4, 6]} ,
{'name': 'Find Customer Referee', 'tags': [0, 12]} ,
{'name': 'Investments in 2016', 'tags': [1, 12]} ,
{'name': 'Customer Placing the Largest Number of Orders', 'tags': [0, 12]} ,
{'name': 'Erect the Fence', 'tags': [2, 3, 7, 43]} ,
{'name': 'Design In-Memory File System', 'tags': [2, 5, 4, 26]} ,
{'name': 'N-ary Tree Preorder Traversal', 'tags': [0, 22, 15, 10]} ,
{'name': 'N-ary Tree Postorder Traversal', 'tags': [0, 22, 15, 10]} ,
{'name': 'Tag Validator', 'tags': [2, 4, 22]} ,
{'name': 'Fraction Addition and Subtraction', 'tags': [1, 7, 4, 20]} ,
{'name': 'Valid Square', 'tags': [1, 7, 43]} ,
{'name': 'Longest Harmonious Subsequence', 'tags': [0, 3, 5, 25]} ,
{'name': 'Big Countries', 'tags': [0, 12]} ,
{'name': 'Classes More Than 5 Students', 'tags': [0, 12]} ,
{'name': 'Friend Requests I: Overall Acceptance Rate', 'tags': [0, 12]} ,
{'name': 'Range Addition II', 'tags': [0, 3, 7]} ,
{'name': 'Minimum Index Sum of Two Lists', 'tags': [0, 3, 5, 4]} ,
{'name': 'Non-negative Integers without Consecutive Ones', 'tags': [2, 6]} ,
{'name': 'Human Traffic of Stadium', 'tags': [2, 12]} ,
{'name': 'Friend Requests II: Who Has the Most Friends', 'tags': [1, 12]} ,
{'name': 'Consecutive Available Seats', 'tags': [0, 12]} ,
{'name': 'Design Compressed String Iterator', 'tags': [0, 3, 4, 26]} ,
{'name': 'Can Place Flowers', 'tags': [0, 3, 9]} ,
{'name': 'Construct String from Binary Tree', 'tags': [1, 4, 15, 10]} ,
{'name': 'Sales Person', 'tags': [0, 12]} ,
{'name': 'Tree Node', 'tags': [1, 12]} ,
{'name': 'Find Duplicate File in System', 'tags': [1, 3, 5, 4]} ,
{'name': 'Triangle Judgement', 'tags': [0, 12]} ,
{'name': 'Valid Triangle Number', 'tags': [1, 3, 17, 11]} ,
{'name': 'Shortest Distance in a Plane', 'tags': [1, 12]} ,
{'name': 'Shortest Distance in a Line', 'tags': [0, 12]} ,
{'name': 'Second Degree Follower', 'tags': [1, 12]} ,
{'name': 'Average Salary: Departments VS Company', 'tags': [2, 12]} ,
{'name': 'Add Bold Tag in String', 'tags': [1, 3, 5, 4]} ,
{'name': 'Merge Two Binary Trees', 'tags': [0, 15, 10]} ,
{'name': 'Students Report By Geography', 'tags': [2, 12]} ,
{'name': 'Biggest Single Number', 'tags': [0, 12]} ,
{'name': 'Not Boring Movies', 'tags': [0, 12]} ,
{'name': 'Task Scheduler', 'tags': [1, 3, 5, 9]} ,
{'name': 'Design Circular Queue', 'tags': [1, 3, 30, 26]} ,
{'name': 'Add One Row to Tree', 'tags': [1, 15, 10]} ,
{'name': 'Maximum Distance in Arrays', 'tags': [1, 3, 9]} ,
{'name': 'Minimum Factorization', 'tags': [1, 7, 9]} ,
{'name': 'Exchange Seats', 'tags': [1, 12]} ,
{'name': 'Swap Salary', 'tags': [0, 12]} ,
{'name': 'Maximum Product of Three Numbers', 'tags': [0, 3, 7, 8]} ,
{'name': 'K Inverse Pairs Array', 'tags': [2, 6]} ,
{'name': 'Course Schedule III', 'tags': [2, 3, 9, 8]} ,
{'name': 'Design Excel Sum Formula', 'tags': [2, 3, 23, 26]} ,
{'name': 'Smallest Range Covering Elements from K Lists', 'tags': [2, 3, 5, 9]} ,
{'name': 'Sum of Square Numbers', 'tags': [1, 7, 17, 11]} ,
{'name': 'Find the Derangement of An Array', 'tags': [1, 7, 6]} ,
{'name': 'Design Log Storage System', 'tags': [1, 5, 4, 26]} ,
{'name': 'Exclusive Time of Functions', 'tags': [1, 3, 22]} ,
{'name': 'Average of Levels in Binary Tree', 'tags': [0, 15, 10]} ,
{'name': 'Shopping Offers', 'tags': [1, 3, 6]} ,
{'name': 'Decode Ways II', 'tags': [2, 4, 6]} ,
{'name': 'Solve the Equation', 'tags': [1, 7, 4, 20]} ,
{'name': 'Design Circular Deque', 'tags': [1, 3, 30, 26]} ,
{'name': 'Design Search Autocomplete System', 'tags': [2, 4, 10, 26]} ,
{'name': 'Maximum Average Subarray I', 'tags': [0, 3, 25]} ,
{'name': 'Maximum Average Subarray II', 'tags': [2, 3, 11, 18]} ,
{'name': 'Set Mismatch', 'tags': [0, 3, 5]} ,
{'name': 'Maximum Length of Pair Chain', 'tags': [1, 3, 6]} ,
{'name': 'Palindromic Substrings', 'tags': [1, 17, 4]} ,
{'name': 'Replace Words', 'tags': [1, 3, 5, 4]} ,
{'name': 'Dota2 Senate', 'tags': [1, 4, 9, 38]} ,
{'name': '2 Keys Keyboard', 'tags': [1, 7, 6]} ,
{'name': '4 Keys Keyboard', 'tags': [1, 7, 6]} ,
{'name': 'Find Duplicate Subtrees', 'tags': [1, 5, 15]} ,
{'name': 'Two Sum IV - Input is a BST', 'tags': [0, 5, 17, 15]} ,
{'name': 'Maximum Binary Tree', 'tags': [1, 3, 40, 22]} ,
{'name': 'Print Binary Tree', 'tags': [1, 15, 10]} ,
{'name': 'Coin Path', 'tags': [2, 3, 6]} ,
{'name': 'Robot Return to Origin', 'tags': [0, 4, 20]} ,
{'name': 'Find K Closest Elements', 'tags': [1, 3, 17, 11]} ,
{'name': 'Split Array into Consecutive Subsequences', 'tags': [1, 3, 5, 9]} ,
{'name': 'Remove 9', 'tags': [2, 7]} ,
{'name': 'Image Smoother', 'tags': [0, 3, 13]} ,
{'name': 'Maximum Width of Binary Tree', 'tags': [1, 15, 10]} ,
{'name': 'Equal Tree Partition', 'tags': [1, 15, 10, 21]} ,
{'name': 'Strange Printer', 'tags': [2, 4, 6]} ,
{'name': 'Non-decreasing Array', 'tags': [1, 3]} ,
{'name': 'Path Sum IV', 'tags': [1, 3, 5, 15]} ,
{'name': 'Beautiful Arrangement II', 'tags': [1, 3, 7]} ,
{'name': 'Kth Smallest Number in Multiplication Table', 'tags': [2, 7, 11]} ,
{'name': 'Trim a Binary Search Tree', 'tags': [1, 15, 10]} ,
{'name': 'Maximum Swap', 'tags': [1, 7, 9]} ,
{'name': 'Second Minimum Node In a Binary Tree', 'tags': [0, 15, 10, 21]} ,
{'name': 'Bulb Switcher II', 'tags': [1, 7, 16]} ,
{'name': 'Number of Longest Increasing Subsequence', 'tags': [1, 3, 6]} ,
{'name': 'Longest Continuous Increasing Subsequence', 'tags': [0, 3]} ,
{'name': 'Cut Off Trees for Golf Event', 'tags': [2, 3, 14]} ,
{'name': 'Implement Magic Dictionary', 'tags': [1, 5, 4]} ,
{'name': 'Map Sum Pairs', 'tags': [1, 5, 4, 26]} ,
{'name': 'Valid Parenthesis String', 'tags': [1, 4, 6]} ,
{'name': '24 Game', 'tags': [2, 3, 7, 28]} ,
{'name': 'Valid Palindrome II', 'tags': [0, 17, 4, 9]} ,
{'name': 'Next Closest Time', 'tags': [1, 5, 4, 28]} ,
{'name': 'Baseball Game', 'tags': [0, 3, 22, 20]} ,
{'name': 'K Empty Slots', 'tags': [2, 3, 42]} ,
{'name': 'Redundant Connection', 'tags': [1, 10]} ,
{'name': 'Redundant Connection II', 'tags': [2, 10]} ,
{'name': 'Repeated String Match', 'tags': [1, 4, 46]} ,
{'name': 'Longest Univalue Path', 'tags': [1, 15, 10, 21]} ,
{'name': 'Knight Probability in Chessboard', 'tags': [1, 6]} ,
{'name': 'Maximum Sum of 3 Non-Overlapping Subarrays', 'tags': [2, 3, 6]} ,
{'name': 'Employee Importance', 'tags': [1, 3, 5, 15]} ,
{'name': 'Stickers to Spell Word', 'tags': [2, 3, 4]} ,
{'name': 'Top K Frequent Words', 'tags': [1, 5, 4, 35]} ,
{'name': 'Binary Number with Alternating Bits', 'tags': [0, 16]} ,
{'name': 'Number of Distinct Islands', 'tags': [1, 5, 10]} ,
{'name': 'Max Area of Island', 'tags': [1, 3, 10]} ,
{'name': 'Count Binary Substrings', 'tags': [0, 17, 4]} ,
{'name': 'Degree of an Array', 'tags': [0, 3, 5]} ,
{'name': 'Partition to K Equal Sum Subsets', 'tags': [1, 3, 6]} ,
{'name': 'Falling Squares', 'tags': [2, 3, 34, 31]} ,
{'name': 'Search in a Binary Search Tree', 'tags': [0, 15, 44, 21]} ,
{'name': 'Insert into a Binary Search Tree', 'tags': [1, 15, 44, 21]} ,
{'name': 'Search in a Sorted Array of Unknown Size', 'tags': [1, 3, 11, 51]} ,
{'name': 'Kth Largest Element in a Stream', 'tags': [0, 15, 26, 44]} ,
{'name': 'Binary Search', 'tags': [0, 3, 11]} ,
{'name': 'Design HashSet', 'tags': [0, 3, 5, 30]} ,
{'name': 'Design HashMap', 'tags': [0, 3, 5, 30]} ,
{'name': 'Design Linked List', 'tags': [1, 30, 26]} ,
{'name': 'Insert into a Sorted Circular Linked List', 'tags': [1, 30]} ,
{'name': 'To Lower Case', 'tags': [0, 4]} ,
{'name': 'Random Pick with Blacklist', 'tags': [2, 3, 5, 7]} ,
{'name': 'Number of Distinct Islands II', 'tags': [2, 5, 10]} ,
{'name': 'Minimum ASCII Delete Sum for Two Strings', 'tags': [1, 4, 6]} ,
{'name': 'Subarray Product Less Than K', 'tags': [1, 3, 11]} ,
{'name': 'Best Time to Buy and Sell Stock with Transaction Fee', 'tags': [1, 3, 6, 9]} ,
{'name': 'Range Module', 'tags': [2, 26, 34, 31]} ,
{'name': 'Max Stack', 'tags': [2, 30, 22, 26]} ,
{'name': '1-bit and 2-bit Characters', 'tags': [0, 3]} ,
{'name': 'Maximum Length of Repeated Subarray', 'tags': [1, 3, 11]} ,
{'name': 'Find K-th Smallest Pair Distance', 'tags': [2, 3, 17, 11]} ,
{'name': 'Longest Word in Dictionary', 'tags': [1, 3, 5, 4]} ,
{'name': 'Accounts Merge', 'tags': [1, 3, 5, 4]} ,
{'name': 'Remove Comments', 'tags': [1, 3, 4]} ,
{'name': 'Candy Crush', 'tags': [1, 3, 17, 13]} ,
{'name': 'Find Pivot Index', 'tags': [0, 3, 18]} ,
{'name': 'Split Linked List in Parts', 'tags': [1, 30]} ,
{'name': 'Number of Atoms', 'tags': [2, 5, 4, 22]} ,
{'name': 'Minimum Window Subsequence', 'tags': [2, 4, 6]} ,
{'name': 'Self Dividing Numbers', 'tags': [0, 7]} ,
{'name': 'My Calendar I', 'tags': [1, 3, 11, 26]} ,
{'name': 'Count Different Palindromic Subsequences', 'tags': [2, 4, 6]} ,
{'name': 'My Calendar II', 'tags': [1, 3, 11, 26]} ,
{'name': 'My Calendar III', 'tags': [2, 11, 26]} ,
{'name': 'Flood Fill', 'tags': [0, 3, 10]} ,
{'name': 'Sentence Similarity', 'tags': [0, 3, 5, 4]} ,
{'name': 'Asteroid Collision', 'tags': [1, 3, 22, 20]} ,
{'name': 'Parse Lisp Expression', 'tags': [2, 5, 4, 22]} ,
{'name': 'Sentence Similarity II', 'tags': [1, 3, 5, 4]} ,
{'name': 'Monotone Increasing Digits', 'tags': [1, 7, 9]} ,
{'name': 'Daily Temperatures', 'tags': [1, 3, 22, 33]} ,
{'name': 'Delete and Earn', 'tags': [1, 3, 5]} ,
{'name': 'Cherry Pickup', 'tags': [2, 3, 6, 13]} ,
{'name': 'Closest Leaf in a Binary Tree', 'tags': [1, 15, 10]} ,
{'name': 'Network Delay Time', 'tags': [1, 10]} ,
{'name': 'Find Smallest Letter Greater Than Target', 'tags': [0, 3, 11]} ,
{'name': 'Prefix and Suffix Search', 'tags': [2, 3, 5, 4]} ,
{'name': 'Min Cost Climbing Stairs', 'tags': [0, 3, 6]} ,
{'name': 'Largest Number At Least Twice of Others', 'tags': [0, 3, 8]} ,
{'name': 'Shortest Completing Word', 'tags': [0, 3, 5, 4]} ,
{'name': 'Contain Virus', 'tags': [2, 3, 10]} ,
{'name': 'Number Of Corner Rectangles', 'tags': [1, 3, 7]} ,
{'name': 'IP to CIDR', 'tags': [1, 4, 16]} ,
{'name': 'Open the Lock', 'tags': [1, 3, 5, 4]} ,
{'name': 'Cracking the Safe', 'tags': [2, 10, 23]} ,
{'name': 'Reach a Number', 'tags': [1, 7, 11]} ,
{'name': 'Pour Water', 'tags': [1, 3, 20]} ,
{'name': 'Pyramid Transition Matrix', 'tags': [1, 16, 10]} ,
{'name': 'Set Intersection Size At Least Two', 'tags': [2, 3, 9, 8]} ,
{'name': 'Bold Words in String', 'tags': [1, 3, 5, 4]} ,
{'name': 'Employee Free Time', 'tags': [2, 3, 8]} ,
{'name': 'Find Anagram Mappings', 'tags': [0, 3, 5]} ,
{'name': 'Special Binary String', 'tags': [2, 4, 39]} ,
{'name': 'Prime Number of Set Bits in Binary Representation', 'tags': [0, 7, 16]} ,
{'name': 'Partition Labels', 'tags': [1, 5, 17, 4]} ,
{'name': 'Largest Plus Sign', 'tags': [1, 3, 6]} ,
{'name': 'Couples Holding Hands', 'tags': [2, 9, 10]} ,
{'name': 'Toeplitz Matrix', 'tags': [0, 3, 13]} ,
{'name': 'Reorganize String', 'tags': [1, 5, 4, 9]} ,
{'name': 'Max Chunks To Make Sorted II', 'tags': [2, 3, 22, 9]} ,
{'name': 'Max Chunks To Make Sorted', 'tags': [1, 3, 22, 9]} ,
{'name': 'Basic Calculator IV', 'tags': [2, 5, 7, 4]} ,
{'name': 'Jewels and Stones', 'tags': [0, 5, 4]} ,
{'name': 'Basic Calculator III', 'tags': [2, 7, 4, 22]} ,
{'name': 'Sliding Puzzle', 'tags': [2, 3, 14, 13]} ,
{'name': 'Minimize Max Distance to Gas Station', 'tags': [2, 3, 11]} ,
{'name': 'Global and Local Inversions', 'tags': [1, 3, 7]} ,
{'name': 'Split BST', 'tags': [1, 15, 44]} ,
{'name': 'Swap Adjacent in LR String', 'tags': [1, 17, 4]} ,
{'name': 'Swim in Rising Water', 'tags': [2, 3, 11]} ,
{'name': 'K-th Symbol in Grammar', 'tags': [1, 7, 16, 39]} ,
{'name': 'Reaching Points', 'tags': [2, 7]} ,
{'name': 'Rabbits in Forest', 'tags': [1, 3, 5, 7]} ,
{'name': 'Transform to Chessboard', 'tags': [2, 3, 7, 16]} ,
{'name': 'Minimum Distance Between BST Nodes', 'tags': [0, 15, 10]} ,
{'name': 'Letter Case Permutation', 'tags': [1, 4, 28, 16]} ,
{'name': 'Is Graph Bipartite?', 'tags': [1, 10]} ,
{'name': 'K-th Smallest Prime Fraction', 'tags': [1, 3, 17, 11]} ,
{'name': 'Cheapest Flights Within K Stops', 'tags': [1, 6]} ,
{'name': 'Rotated Digits', 'tags': [1, 7, 6]} ,
{'name': 'Escape The Ghosts', 'tags': [1, 3, 7]} ,
{'name': 'Domino and Tromino Tiling', 'tags': [1, 6]} ,
{'name': 'Custom Sort String', 'tags': [1, 5, 4, 8]} ,
{'name': 'Number of Matching Subsequences', 'tags': [1, 3, 5, 4]} ,
{'name': 'Preimage Size of Factorial Zeroes Function', 'tags': [2, 7, 11]} ,
{'name': 'Valid Tic-Tac-Toe State', 'tags': [1, 3, 13]} ,
{'name': 'Number of Subarrays with Bounded Maximum', 'tags': [1, 3, 17]} ,
{'name': 'Rotate String', 'tags': [0, 4, 46]} ,
{'name': 'All Paths From Source to Target', 'tags': [1, 28, 10]} ,
{'name': 'Smallest Rotation with Highest Score', 'tags': [2, 3, 18]} ,
{'name': 'Champagne Tower', 'tags': [1, 6]} ,
{'name': 'Similar RGB Color', 'tags': [0, 7, 4, 27]} ,
{'name': 'Minimum Swaps To Make Sequences Increasing', 'tags': [2, 3, 6]} ,
{'name': 'Find Eventual Safe States', 'tags': [1, 10]} ,
{'name': 'Bricks Falling When Hit', 'tags': [2, 3, 29, 13]} ,
{'name': 'Unique Morse Code Words', 'tags': [0, 3, 5, 4]} ,
{'name': 'Split Array With Same Average', 'tags': [2, 3, 7]} ,
{'name': 'Number of Lines To Write String', 'tags': [0, 3, 4]} ,
{'name': 'Max Increase to Keep City Skyline', 'tags': [1, 3, 9, 13]} ,
{'name': 'Soup Servings', 'tags': [1, 7, 6]} ,
{'name': 'Expressive Words', 'tags': [1, 3, 17, 4]} ,
{'name': 'Chalkboard XOR Game', 'tags': [2, 3, 7, 16]} ,
{'name': 'Subdomain Visit Count', 'tags': [1, 3, 5, 4]} ,
{'name': 'Largest Triangle Area', 'tags': [0, 3, 7, 43]} ,
{'name': 'Largest Sum of Averages', 'tags': [1, 3, 6]} ,
{'name': 'Binary Tree Pruning', 'tags': [1, 15, 10, 21]} ,
{'name': 'Bus Routes', 'tags': [2, 3, 5, 14]} ,
{'name': 'Ambiguous Coordinates', 'tags': [1, 4, 28, 27]} ,
{'name': 'Linked List Components', 'tags': [1, 3, 5, 30]} ,
{'name': 'Race Car', 'tags': [2, 6]} ,
{'name': 'Most Common Word', 'tags': [0, 3, 5, 4]} ,
{'name': 'Short Encoding of Words', 'tags': [1, 3, 5, 4]} ,
{'name': 'Shortest Distance to a Character', 'tags': [0, 3, 17, 4]} ,
{'name': 'Card Flipping Game', 'tags': [1, 3, 5]} ,
{'name': 'Binary Trees With Factors', 'tags': [1, 3, 5]} ,
{'name': 'Goat Latin', 'tags': [0, 4]} ,
{'name': 'Friends Of Appropriate Ages', 'tags': [1, 3, 17, 11]} ,
{'name': 'Most Profit Assigning Work', 'tags': [1, 3, 17, 11]} ,
{'name': 'Making A Large Island', 'tags': [2, 3, 10]} ,
{'name': 'Count Unique Characters of All Substrings of a Given String', 'tags': [2, 5, 4]} ,
{'name': 'Consecutive Numbers Sum', 'tags': [2, 7, 27]} ,
{'name': 'Positions of Large Groups', 'tags': [0, 4]} ,
{'name': 'Masking Personal Information', 'tags': [1, 4]} ,
{'name': 'Flipping an Image', 'tags': [0, 3, 17]} ,
{'name': 'Find And Replace in String', 'tags': [1, 3, 5, 4]} ,
{'name': 'Sum of Distances in Tree', 'tags': [2, 6, 15]} ,
{'name': 'Image Overlap', 'tags': [1, 3, 13]} ,
{'name': 'Rectangle Overlap', 'tags': [0, 7, 43]} ,
{'name': 'New 21 Game', 'tags': [1, 7, 6]} ,
{'name': 'Push Dominoes', 'tags': [1, 17, 4]} ,
{'name': 'Similar String Groups', 'tags': [2, 3, 5, 4]} ,
{'name': 'Magic Squares In Grid', 'tags': [1, 3, 5, 7]} ,
{'name': 'Keys and Rooms', 'tags': [1, 10]} ,
{'name': 'Split Array into Fibonacci Sequence', 'tags': [1, 4, 28]} ,
{'name': 'Guess the Word', 'tags': [2, 3, 7, 4]} ,
{'name': 'Backspace String Compare', 'tags': [0, 17, 4, 22]} ,
{'name': 'Longest Mountain in Array', 'tags': [1, 3, 17]} ,
{'name': 'Hand of Straights', 'tags': [1, 3, 5, 9]} ,
{'name': 'Shortest Path Visiting All Nodes', 'tags': [2, 6]} ,
{'name': 'Shifting Letters', 'tags': [1, 3, 4, 18]} ,
{'name': 'Maximize Distance to Closest Person', 'tags': [1, 3]} ,
{'name': 'Rectangle Area II', 'tags': [2, 3, 34, 65]} ,
{'name': 'Loud and Rich', 'tags': [1, 3, 10, 23]} ,
{'name': 'Peak Index in a Mountain Array', 'tags': [1, 3, 11]} ,
{'name': 'Car Fleet', 'tags': [1, 3, 22, 8]} ,
{'name': 'K-Similar Strings', 'tags': [2, 4, 14]} ,
{'name': 'Exam Room', 'tags': [1, 26]} ,
{'name': 'Score of Parentheses', 'tags': [1, 4, 22]} ,
{'name': 'Minimum Cost to Hire K Workers', 'tags': [2, 3, 9, 8]} ,
{'name': 'Mirror Reflection', 'tags': [1, 7, 43, 32]} ,
{'name': 'Buddy Strings', 'tags': [0, 5, 4]} ,
{'name': 'Lemonade Change', 'tags': [0, 3, 9]} ,
{'name': 'Score After Flipping Matrix', 'tags': [1, 3, 9, 16]} ,
{'name': 'Shortest Subarray with Sum at Least K', 'tags': [2, 3, 11, 38]} ,
{'name': 'All Nodes Distance K in Binary Tree', 'tags': [1, 5, 15]} ,
{'name': 'Shortest Path to Get All Keys', 'tags': [2, 3, 16]} ,
{'name': 'Smallest Subtree with all the Deepest Nodes', 'tags': [1, 5, 15]} ,
{'name': 'Prime Palindrome', 'tags': [1, 7, 32]} ,
{'name': 'Transpose Matrix', 'tags': [0, 3, 13, 20]} ,
{'name': 'Binary Gap', 'tags': [0, 16]} ,
{'name': 'Reordered Power of 2', 'tags': [1, 5, 7, 8]} ,
{'name': 'Advantage Shuffle', 'tags': [1, 3, 17, 9]} ,
{'name': 'Minimum Number of Refueling Stops', 'tags': [2, 3, 6]} ,
{'name': 'Leaf-Similar Trees', 'tags': [0, 15, 10, 21]} ,
{'name': 'Length of Longest Fibonacci Subsequence', 'tags': [1, 3, 5]} ,
{'name': 'Walking Robot Simulation', 'tags': [1, 3, 5, 20]} ,
{'name': 'Koko Eating Bananas', 'tags': [1, 3, 11]} ,
{'name': 'Middle of the Linked List', 'tags': [0, 30, 17]} ,
{'name': 'Stone Game', 'tags': [1, 3, 7]} ,
{'name': 'Nth Magical Number', 'tags': [2, 7, 11]} ,
{'name': 'Profitable Schemes', 'tags': [2, 3, 6]} ,
{'name': 'Decoded String at Index', 'tags': [1, 4, 22]} ,
{'name': 'Boats to Save People', 'tags': [1, 3, 17, 9]} ,
{'name': 'Reachable Nodes In Subdivided Graph', 'tags': [2, 23]} ,
{'name': 'Projection Area of 3D Shapes', 'tags': [0, 3, 7, 43]} ,
{'name': 'Uncommon Words from Two Sentences', 'tags': [0, 5, 4, 24]} ,
{'name': 'Spiral Matrix III', 'tags': [1, 3, 13, 20]} ,
{'name': 'Possible Bipartition', 'tags': [1, 10]} ,
{'name': 'Super Egg Drop', 'tags': [2, 7, 11]} ,
{'name': 'Fair Candy Swap', 'tags': [0, 3, 5, 11]} ,
{'name': 'Construct Binary Tree from Preorder and Postorder Traversal', 'tags': [1, 3, 5]} ,
{'name': 'Find and Replace Pattern', 'tags': [1, 3, 5, 4]} ,
{'name': 'Sum of Subsequence Widths', 'tags': [2, 3, 7, 8]} ,
{'name': 'Surface Area of 3D Shapes', 'tags': [0, 3, 7, 43]} ,
{'name': 'Groups of Special-Equivalent Strings', 'tags': [1, 3, 5, 4]} ,
{'name': 'All Possible Full Binary Trees', 'tags': [1, 6, 15]} ,
{'name': 'Maximum Frequency Stack', 'tags': [2, 5, 22, 26]} ,
{'name': 'Monotonic Array', 'tags': [0, 3]} ,
{'name': 'Increasing Order Search Tree', 'tags': [0, 22, 15, 10]} ,
{'name': 'Bitwise ORs of Subarrays', 'tags': [1, 3, 6]} ,
{'name': 'Orderly Queue', 'tags': [2, 7, 4, 8]} ,
{'name': 'RLE Iterator', 'tags': [1, 3, 26, 24]} ,
{'name': 'Online Stock Span', 'tags': [1, 22, 26, 33]} ,
{'name': 'Numbers At Most N Given Digit Set', 'tags': [2, 3, 7, 4]} ,
{'name': 'Valid Permutations for DI Sequence', 'tags': [2, 4, 6]} ,
{'name': 'Fruit Into Baskets', 'tags': [1, 3, 5, 25]} ,
{'name': 'Sort Array By Parity', 'tags': [0, 3, 17, 8]} ,
{'name': 'Super Palindromes', 'tags': [2, 7, 27]} ,
{'name': 'Sum of Subarray Minimums', 'tags': [1, 3, 6]} ,
{'name': 'Smallest Range I', 'tags': [0, 3, 7]} ,
{'name': 'Snakes and Ladders', 'tags': [1, 3, 14, 13]} ,
{'name': 'Smallest Range II', 'tags': [1, 3, 7, 9]} ,
{'name': 'Online Election', 'tags': [1, 3, 5, 11]} ,
{'name': 'Sort an Array', 'tags': [1, 3, 40]} ,
{'name': 'Cat and Mouse', 'tags': [2, 7, 6]} ,
{'name': 'X of a Kind in a Deck of Cards', 'tags': [0, 3, 5, 7]} ,
{'name': 'Partition Array into Disjoint Intervals', 'tags': [1, 3]} ,
{'name': 'Word Subsets', 'tags': [1, 3, 5, 4]} ,
{'name': 'Reverse Only Letters', 'tags': [0, 17, 4]} ,
{'name': 'Maximum Sum Circular Subarray', 'tags': [1, 3, 40]} ,
{'name': 'Complete Binary Tree Inserter', 'tags': [1, 15, 14, 26]} ,
{'name': 'Number of Music Playlists', 'tags': [2, 7, 6]} ,
{'name': 'Minimum Add to Make Parentheses Valid', 'tags': [1, 4, 22, 9]} ,
{'name': 'Sort Array By Parity II', 'tags': [0, 3, 17, 8]} ,
{'name': '3Sum With Multiplicity', 'tags': [1, 3, 5, 17]} ,
{'name': 'Minimize Malware Spread', 'tags': [2, 3, 5]} ,
{'name': 'Long Pressed Name', 'tags': [0, 17, 4]} ,
{'name': 'Flip String to Monotone Increasing', 'tags': [1, 4, 6]} ,
{'name': 'Three Equal Parts', 'tags': [2, 3, 7]} ,
{'name': 'Minimize Malware Spread II', 'tags': [2, 3, 5]} ,
{'name': 'Unique Email Addresses', 'tags': [0, 3, 5, 4]} ,
{'name': 'Binary Subarrays With Sum', 'tags': [1, 3, 5, 25]} ,
{'name': 'Minimum Falling Path Sum', 'tags': [1, 3, 6, 13]} ,
{'name': 'Beautiful Array', 'tags': [1, 3, 7, 40]} ,
{'name': 'Number of Recent Calls', 'tags': [0, 26, 38, 52]} ,
{'name': 'Shortest Bridge', 'tags': [1, 3, 10]} ,
{'name': 'Knight Dialer', 'tags': [1, 6]} ,
{'name': 'Stamping The Sequence', 'tags': [2, 4, 22, 9]} ,
{'name': 'Reorder Data in Log Files', 'tags': [1, 3, 4, 8]} ,
{'name': 'Range Sum of BST', 'tags': [0, 15, 10]} ,
{'name': 'Minimum Area Rectangle', 'tags': [1, 3, 5, 7]} ,
{'name': 'Distinct Subsequences II', 'tags': [2, 4, 6]} ,
{'name': 'Valid Mountain Array', 'tags': [0, 3]} ,
{'name': 'DI String Match', 'tags': [0, 3, 17, 4]} ,
{'name': 'Find the Shortest Superstring', 'tags': [2, 3, 4]} ,
{'name': 'Delete Columns to Make Sorted', 'tags': [0, 3, 4]} ,
{'name': 'Minimum Increment to Make Array Unique', 'tags': [1, 3, 9, 8]} ,
{'name': 'Validate Stack Sequences', 'tags': [1, 3, 22, 20]} ,
{'name': 'Most Stones Removed with Same Row or Column', 'tags': [1, 5, 10]} ,
{'name': 'Bag of Tokens', 'tags': [1, 3, 17, 9]} ,
{'name': 'Largest Time for Given Digits', 'tags': [1, 3, 4, 27]} ,
{'name': 'Reveal Cards In Increasing Order', 'tags': [1, 3, 38, 8]} ,
{'name': 'Flip Equivalent Binary Trees', 'tags': [1, 15, 10, 21]} ,
{'name': 'Largest Component Size by Common Factor', 'tags': [2, 3, 5, 7]} ,
{'name': 'Verifying an Alien Dictionary', 'tags': [0, 3, 5, 4]} ,
{'name': 'Array of Doubled Pairs', 'tags': [1, 3, 5, 9]} ,
{'name': 'Delete Columns to Make Sorted II', 'tags': [1, 3, 4, 9]} ,
{'name': 'Tallest Billboard', 'tags': [2, 3, 6]} ,
{'name': 'Prison Cells After N Days', 'tags': [1, 3, 5, 7]} ,
{'name': 'Check Completeness of a Binary Tree', 'tags': [1, 15, 14, 21]} ,
{'name': 'Regions Cut By Slashes', 'tags': [1, 3, 5]} ,
{'name': 'Delete Columns to Make Sorted III', 'tags': [2, 3, 4, 6]} ,
{'name': 'N-Repeated Element in Size 2N Array', 'tags': [0, 3, 5]} ,
{'name': 'Maximum Width Ramp', 'tags': [1, 3, 22, 33]} ,
{'name': 'Minimum Area Rectangle II', 'tags': [1, 3, 7, 43]} ,
{'name': 'Least Operators to Express Number', 'tags': [2, 7, 6]} ,
{'name': 'Univalued Binary Tree', 'tags': [0, 15, 10]} ,
{'name': 'Vowel Spellchecker', 'tags': [1, 3, 5, 4]} ,
{'name': 'Numbers With Same Consecutive Differences', 'tags': [1, 28, 14]} ,
{'name': 'Binary Tree Cameras', 'tags': [2, 6, 15]} ,
{'name': 'Pancake Sorting', 'tags': [1, 3, 17, 9]} ,
{'name': 'Powerful Integers', 'tags': [1, 5, 7, 27]} ,
{'name': 'Flip Binary Tree To Match Preorder Traversal', 'tags': [1, 15, 10, 21]} ,
{'name': 'Equal Rational Numbers', 'tags': [2, 7, 4]} ,
{'name': 'K Closest Points to Origin', 'tags': [1, 3, 7, 40]} ,
{'name': 'Subarray Sums Divisible by K', 'tags': [1, 3, 5, 18]} ,
{'name': 'Odd Even Jump', 'tags': [2, 3, 6]} ,
{'name': 'Largest Perimeter Triangle', 'tags': [0, 3, 7, 9]} ,
{'name': 'Squares of a Sorted Array', 'tags': [0, 3, 17, 8]} ,
{'name': 'Longest Turbulent Subarray', 'tags': [1, 3, 6]} ,
{'name': 'Distribute Coins in Binary Tree', 'tags': [1, 15, 10, 21]} ,
{'name': 'Unique Paths III', 'tags': [2, 3, 28]} ,
{'name': 'Time Based Key-Value Store', 'tags': [1, 5, 4, 11]} ,
{'name': 'Triples with Bitwise AND Equal To Zero', 'tags': [2, 3, 5, 16]} ,
{'name': 'Minimum Cost For Tickets', 'tags': [1, 3, 6]} ,
{'name': 'String Without AAA or BBB', 'tags': [1, 4, 9]} ,
{'name': 'Sum of Even Numbers After Queries', 'tags': [1, 3, 20]} ,
{'name': 'Interval List Intersections', 'tags': [1, 3, 17]} ,
{'name': 'Vertical Order Traversal of a Binary Tree', 'tags': [2, 5, 15]} ,
{'name': 'Smallest String Starting From Leaf', 'tags': [1, 4, 28, 15]} ,
{'name': 'Add to Array-Form of Integer', 'tags': [0, 3, 7]} ,
{'name': 'Satisfiability of Equality Equations', 'tags': [1, 3, 4, 29]} ,
{'name': 'Broken Calculator', 'tags': [1, 7, 9]} ,
{'name': 'Subarrays with K Different Integers', 'tags': [2, 3, 5, 25]} ,
{'name': 'Cousins in Binary Tree', 'tags': [0, 15, 10]} ,
{'name': 'Rotting Oranges', 'tags': [1, 3, 14, 13]} ,
{'name': 'Minimum Number of K Consecutive Bit Flips', 'tags': [2, 3, 16, 38]} ,
{'name': 'Number of Squareful Arrays', 'tags': [2, 3, 5, 7]} ,
{'name': 'Find the Town Judge', 'tags': [0, 3, 5, 23]} ,
{'name': 'Maximum Binary Tree II', 'tags': [1, 15, 21]} ,
{'name': 'Available Captures for Rook', 'tags': [0, 3, 13, 20]} ,
{'name': 'Minimum Cost to Merge Stones', 'tags': [2, 3, 6]} ,
{'name': 'Grid Illumination', 'tags': [2, 3, 5]} ,
{'name': 'Find Common Characters', 'tags': [0, 3, 5, 4]} ,
{'name': 'Check If Word Is Valid After Substitutions', 'tags': [1, 4, 22]} ,
{'name': 'Max Consecutive Ones III', 'tags': [1, 3, 11]} ,
{'name': 'Maximize Sum Of Array After K Negations', 'tags': [0, 3, 9, 8]} ,
{'name': 'Clumsy Factorial', 'tags': [1, 7, 22, 20]} ,
{'name': 'Minimum Domino Rotations For Equal Row', 'tags': [1, 3, 9]} ,
{'name': 'Construct Binary Search Tree from Preorder Traversal', 'tags': [1, 3, 22, 15]} ,
{'name': 'Complement of Base 10 Integer', 'tags': [0, 16]} ,
{'name': 'Pairs of Songs With Total Durations Divisible by 60', 'tags': [1, 3, 5, 24]} ,
{'name': 'Capacity To Ship Packages Within D Days', 'tags': [1, 3, 11]} ,
{'name': 'Numbers With Repeated Digits', 'tags': [2, 7, 6]} ,
{'name': 'Partition Array Into Three Parts With Equal Sum', 'tags': [0, 3, 9]} ,
{'name': 'Best Sightseeing Pair', 'tags': [1, 3, 6]} ,
{'name': 'Smallest Integer Divisible by K', 'tags': [1, 5, 7]} ,
{'name': 'Binary String With Substrings Representing 1 To N', 'tags': [1, 4]} ,
{'name': 'Convert to Base -2', 'tags': [1, 7]} ,
{'name': 'Binary Prefix Divisible By 5', 'tags': [0, 3, 16]} ,
{'name': 'Next Greater Node In Linked List', 'tags': [1, 3, 30, 22]} ,
{'name': 'Number of Enclaves', 'tags': [1, 3, 10]} ,
{'name': 'Remove Outermost Parentheses', 'tags': [0, 4, 22]} ,
{'name': 'Sum of Root To Leaf Binary Numbers', 'tags': [0, 15, 10, 21]} ,
{'name': 'Camelcase Matching', 'tags': [1, 3, 17, 4]} ,
{'name': 'Video Stitching', 'tags': [1, 3, 6, 9]} ,
{'name': 'Divisor Game', 'tags': [0, 7, 6]} ,
{'name': 'Maximum Difference Between Node and Ancestor', 'tags': [1, 15, 10, 21]} ,
{'name': 'Longest Arithmetic Subsequence', 'tags': [1, 3, 5, 11]} ,
{'name': 'Recover a Tree From Preorder Traversal', 'tags': [2, 4, 15, 10]} ,
{'name': 'Two City Scheduling', 'tags': [1, 3, 9, 8]} ,
{'name': 'Matrix Cells in Distance Order', 'tags': [0, 3, 7, 43]} ,
{'name': 'Maximum Sum of Two Non-Overlapping Subarrays', 'tags': [1, 3, 6]} ,
{'name': 'Stream of Characters', 'tags': [2, 3, 4, 26]} ,
{'name': 'Moving Stones Until Consecutive', 'tags': [1, 7, 54]} ,
{'name': 'Coloring A Border', 'tags': [1, 3, 10]} ,
{'name': 'Uncrossed Lines', 'tags': [1, 3, 6]} ,
{'name': 'Escape a Large Maze', 'tags': [2, 3, 5]} ,
{'name': 'Valid Boomerang', 'tags': [0, 3, 7, 43]} ,
{'name': 'Binary Search Tree to Greater Sum Tree', 'tags': [1, 15, 10]} ,
{'name': 'Minimum Score Triangulation of Polygon', 'tags': [1, 3, 6]} ,
{'name': 'Moving Stones Until Consecutive II', 'tags': [1, 3, 7, 17]} ,
{'name': 'Robot Bounded In Circle', 'tags': [1, 7, 4, 20]} ,
{'name': 'Flower Planting With No Adjacent', 'tags': [1, 10]} ,
{'name': 'Partition Array for Maximum Sum', 'tags': [1, 3, 6]} ,
{'name': 'Longest Duplicate Substring', 'tags': [2, 4, 11]} ,
{'name': 'Customers Who Bought All Products', 'tags': [1, 12]} ,
{'name': 'Last Stone Weight', 'tags': [0, 3]} ,
{'name': 'Remove All Adjacent Duplicates In String', 'tags': [0, 4, 22]} ,
{'name': 'Longest String Chain', 'tags': [1, 3, 5, 17]} ,
{'name': 'Last Stone Weight II', 'tags': [1, 3, 6]} ,
{'name': 'Actors and Directors Who Cooperated At Least Three Times', 'tags': [0, 12]} ,
{'name': 'Height Checker', 'tags': [0, 3, 8, 58]} ,
{'name': 'Grumpy Bookstore Owner', 'tags': [1, 3, 25]} ,
{'name': 'Previous Permutation With One Swap', 'tags': [1, 3, 9]} ,
{'name': 'Distant Barcodes', 'tags': [1, 3, 5, 9]} ,
{'name': 'Shortest Way to Form String', 'tags': [1, 17, 4, 11]} ,
{'name': 'Confusing Number', 'tags': [0, 7]} ,
{'name': 'Campus Bikes', 'tags': [1, 3, 9, 8]} ,
{'name': 'Minimize Rounding Error to Meet Target', 'tags': [1, 3, 7, 4]} ,
{'name': 'All Paths from Source Lead to Destination', 'tags': [1, 23, 47]} ,
{'name': 'Missing Element in Sorted Array', 'tags': [1, 3, 11]} ,
{'name': 'Lexicographically Smallest Equivalent String', 'tags': [1, 4, 29]} ,
{'name': 'Longest Repeating Substring', 'tags': [1, 4, 11]} ,
{'name': 'Number of Valid Subarrays', 'tags': [2, 3, 22, 33]} ,
{'name': 'Fixed Point', 'tags': [0, 3, 11]} ,
{'name': 'Index Pairs of a String', 'tags': [0, 3, 4, 35]} ,
{'name': 'Campus Bikes II', 'tags': [1, 3, 6]} ,
{'name': 'Digit Count in Range', 'tags': [2, 7, 6]} ,
{'name': 'Product Sales Analysis I', 'tags': [0, 12]} ,
{'name': 'Product Sales Analysis II', 'tags': [0, 12]} ,
{'name': 'Product Sales Analysis III', 'tags': [1, 12]} ,
{'name': 'Greatest Common Divisor of Strings', 'tags': [0, 7, 4]} ,
{'name': 'Flip Columns For Maximum Number of Equal Rows', 'tags': [1, 3, 5, 13]} ,
{'name': 'Adding Two Negabinary Numbers', 'tags': [1, 3, 7]} ,
{'name': 'Number of Submatrices That Sum to Target', 'tags': [2, 3, 5, 13]} ,
{'name': 'Project Employees I', 'tags': [0, 12]} ,
{'name': 'Project Employees II', 'tags': [0, 12]} ,
{'name': 'Project Employees III', 'tags': [1, 12]} ,
{'name': 'Occurrences After Bigram', 'tags': [0, 4]} ,
{'name': 'Letter Tile Possibilities', 'tags': [1, 5, 4, 28]} ,
{'name': 'Insufficient Nodes in Root to Leaf Paths', 'tags': [1, 15, 10, 21]} ,
{'name': 'Smallest Subsequence of Distinct Characters', 'tags': [1, 4, 22, 9]} ,
{'name': 'Sales Analysis I', 'tags': [0, 12]} ,
{'name': 'Sales Analysis II', 'tags': [0, 12]} ,
{'name': 'Sales Analysis III', 'tags': [0, 12]} ,
{'name': 'Sum of Digits in the Minimum Number', 'tags': [0, 3, 7]} ,
{'name': 'High Five', 'tags': [0, 3, 5, 8]} ,
{'name': 'Brace Expansion', 'tags': [1, 4, 28]} ,
{'name': 'Confusing Number II', 'tags': [2, 7, 28]} ,
{'name': 'Duplicate Zeros', 'tags': [0, 3, 17]} ,
{'name': 'Largest Values From Labels', 'tags': [1, 3, 5, 9]} ,
{'name': 'Shortest Path in Binary Matrix', 'tags': [1, 3, 14, 13]} ,
{'name': 'Shortest Common Supersequence', 'tags': [2, 4, 6]} ,
{'name': 'Statistics from a Large Sample', 'tags': [1, 3, 7, 61]} ,
{'name': 'Car Pooling', 'tags': [1, 3, 8]} ,
{'name': 'Find in Mountain Array', 'tags': [2, 3, 11, 51]} ,
{'name': 'Brace Expansion II', 'tags': [2, 4, 28, 22]} ,
{'name': 'Game Play Analysis V', 'tags': [2, 12]} ,
{'name': 'Unpopular Books', 'tags': [1, 12]} ,
{'name': 'Two Sum Less Than K', 'tags': [0, 3, 17, 11]} ,
{'name': 'Find K-Length Substrings With No Repeated Characters', 'tags': [1, 5, 4, 25]} ,
{'name': 'The Earliest Moment When Everyone Become Friends', 'tags': [1, 3, 29, 8]} ,
{'name': 'Path With Maximum Minimum Value', 'tags': [1, 3, 11]} ,
{'name': 'Distribute Candies to People', 'tags': [0, 7, 20]} ,
{'name': 'Path In Zigzag Labelled Binary Tree', 'tags': [1, 7, 15, 21]} ,
{'name': 'Filling Bookcase Shelves', 'tags': [1, 3, 6]} ,
{'name': 'Parsing A Boolean Expression', 'tags': [2, 4, 22, 39]} ,
{'name': 'New Users Daily Count', 'tags': [1, 12]} ,
{'name': 'Defanging an IP Address', 'tags': [0, 4]} ,
{'name': 'Corporate Flight Bookings', 'tags': [1, 3, 18]} ,
{'name': 'Delete Nodes And Return Forest', 'tags': [1, 3, 5, 15]} ,
{'name': 'Maximum Nesting Depth of Two Valid Parentheses Strings', 'tags': [1, 4, 22]} ,
{'name': 'Highest Grade For Each Student', 'tags': [1, 12]} ,
{'name': 'Reported Posts', 'tags': [0, 12]} ,
{'name': 'Print in Order', 'tags': [0, 60]} ,
{'name': 'Print FooBar Alternately', 'tags': [1, 60]} ,
{'name': 'Print Zero Even Odd', 'tags': [1, 60]} ,
{'name': 'Building H2O', 'tags': [1, 60]} ,
{'name': 'Number of Days in a Month', 'tags': [0, 7]} ,
{'name': 'Remove Vowels from a String', 'tags': [0, 4]} ,
{'name': 'Maximum Average Subtree', 'tags': [1, 15, 10, 21]} ,
{'name': 'Divide Array Into Increasing Sequences', 'tags': [2, 3, 24]} ,
{'name': 'Relative Sort Array', 'tags': [0, 3, 5, 8]} ,
{'name': 'Lowest Common Ancestor of Deepest Leaves', 'tags': [1, 5, 15]} ,
{'name': 'Longest Well-Performing Interval', 'tags': [1, 3, 5, 22]} ,
{'name': 'Smallest Sufficient Team', 'tags': [2, 3, 6]} ,
{'name': 'Active Businesses', 'tags': [1, 12]} ,
{'name': 'User Purchase Platform', 'tags': [2, 12]} ,
{'name': 'Number of Equivalent Domino Pairs', 'tags': [0, 3, 5, 24]} ,
{'name': 'Shortest Path with Alternating Colors', 'tags': [1, 14, 23]} ,
{'name': 'Minimum Cost Tree From Leaf Values', 'tags': [1, 3, 6]} ,
{'name': 'Maximum of Absolute Value Expression', 'tags': [1, 3, 7]} ,
{'name': 'Reported Posts II', 'tags': [1, 12]} ,
{'name': 'Largest Unique Number', 'tags': [0, 3, 5, 8]} ,
{'name': 'Armstrong Number', 'tags': [0, 7]} ,
{'name': 'Connecting Cities With Minimum Cost', 'tags': [1, 29, 23]} ,
{'name': 'Parallel Courses', 'tags': [1, 23, 47]} ,
{'name': 'N-th Tribonacci Number', 'tags': [0, 7, 6]} ,
{'name': 'Alphabet Board Path', 'tags': [1, 5, 4]} ,
{'name': 'Largest 1-Bordered Square', 'tags': [1, 3, 6, 13]} ,
{'name': 'Stone Game II', 'tags': [1, 3, 7]} ,
{'name': 'User Activity for the Past 30 Days I', 'tags': [0, 12]} ,
{'name': 'User Activity for the Past 30 Days II', 'tags': [0, 12]} ,
{'name': 'Longest Common Subsequence', 'tags': [1, 4, 6]} ,
{'name': 'Decrease Elements To Make Array Zigzag', 'tags': [1, 3, 9]} ,
{'name': 'Binary Tree Coloring Game', 'tags': [1, 15, 10, 21]} ,
{'name': 'Snapshot Array', 'tags': [1, 3, 5, 11]} ,
{'name': 'Longest Chunked Palindrome Decomposition', 'tags': [2, 17, 4]} ,
{'name': 'Article Views I', 'tags': [0, 12]} ,
{'name': 'Article Views II', 'tags': [1, 12]} ,
{'name': 'Check If a Number Is Majority Element in a Sorted Array', 'tags': [0, 3, 11]} ,
{'name': "Minimum Swaps to Group All 1's Together", 'tags': [1, 3, 25]} ,
{'name': 'Analyze User Website Visit Pattern', 'tags': [1, 3, 5, 8]} ,
{'name': 'String Transforms Into Another String', 'tags': [2, 5, 4]} ,
{'name': 'Day of the Year', 'tags': [0, 7, 4]} ,
{'name': 'Number of Dice Rolls With Target Sum', 'tags': [1, 6]} ,
{'name': 'Swap For Longest Repeated Character Substring', 'tags': [1, 5, 4, 25]} ,
{'name': 'Online Majority Element In Subarray', 'tags': [2, 3, 11, 26]} ,
{'name': 'Market Analysis I', 'tags': [1, 12]} ,
{'name': 'Market Analysis II', 'tags': [2, 12]} ,
{'name': 'Find Words That Can Be Formed by Characters', 'tags': [0, 3, 5, 4]} ,
{'name': 'Maximum Level Sum of a Binary Tree', 'tags': [1, 15, 10]} ,
{'name': 'As Far from Land as Possible', 'tags': [1, 3, 6]} ,
{'name': 'Last Substring in Lexicographical Order', 'tags': [2, 17, 4]} ,
{'name': 'Product Price at a Given Date', 'tags': [1, 12]} ,
{'name': 'Single-Row Keyboard', 'tags': [0, 5, 4]} ,
{'name': 'Design File System', 'tags': [1, 5, 4, 26]} ,
{'name': 'Minimum Cost to Connect Sticks', 'tags': [1, 3, 9]} ,
{'name': 'Optimize Water Distribution in a Village', 'tags': [2, 29, 23]} ,
{'name': 'Invalid Transactions', 'tags': [1, 3, 5, 4]} ,
{'name': 'Compare Strings by Frequency of the Smallest Character', 'tags': [1, 3, 5, 4]} ,
{'name': 'Remove Zero Sum Consecutive Nodes from Linked List', 'tags': [1, 5, 30]} ,
{'name': 'Dinner Plate Stacks', 'tags': [2, 5, 22, 26]} ,
{'name': 'Immediate Food Delivery I', 'tags': [0, 12]} ,
{'name': 'Immediate Food Delivery II', 'tags': [1, 12]} ,
{'name': 'Prime Arrangements', 'tags': [0, 7]} ,
{'name': 'Diet Plan Performance', 'tags': [0, 3, 25]} ,
{'name': 'Can Make Palindrome from Substring', 'tags': [1, 3, 5, 4]} ,
{'name': 'Number of Valid Words for Each Puzzle', 'tags': [2, 3, 5, 4]} ,
{'name': 'Reformat Department Table', 'tags': [0, 12]} ,
{'name': 'Count Substrings with Only One Distinct Letter', 'tags': [0, 7, 4]} ,
{'name': 'Before and After Puzzle', 'tags': [1, 3, 5, 4]} ,
{'name': 'Shortest Distance to Target Color', 'tags': [1, 3, 11]} ,
{'name': 'Maximum Number of Ones', 'tags': [2, 9]} ,
{'name': 'Distance Between Bus Stops', 'tags': [0, 3]} ,
{'name': 'Day of the Week', 'tags': [0, 7]} ,
{'name': 'Maximum Subarray Sum with One Deletion', 'tags': [1, 3, 6]} ,
{'name': 'Make Array Strictly Increasing', 'tags': [2, 3, 11]} ,
{'name': 'Design Bounded Blocking Queue', 'tags': [1, 60]} ,
{'name': 'Maximum Number of Balloons', 'tags': [0, 5, 4, 24]} ,
{'name': 'Reverse Substrings Between Each Pair of Parentheses', 'tags': [1, 4, 22]} ,
{'name': 'K-Concatenation Maximum Sum', 'tags': [1, 3, 6]} ,
{'name': 'Critical Connections in a Network', 'tags': [2, 10, 23]} ,
{'name': 'Monthly Transactions I', 'tags': [1, 12]} ,
{'name': 'Tournament Winners', 'tags': [2, 12]} ,
{'name': 'Fizz Buzz Multithreaded', 'tags': [1, 60]} ,
{'name': 'How Many Apples Can You Put into the Basket', 'tags': [0, 3, 9, 8]} ,
{'name': 'Minimum Knight Moves', 'tags': [1, 14]} ,
{'name': 'Find Smallest Common Element in All Rows', 'tags': [1, 3, 5, 11]} ,
{'name': 'Minimum Time to Build Blocks', 'tags': [2, 3, 7, 9]} ,
{'name': 'Minimum Absolute Difference', 'tags': [0, 3, 8]} ,
{'name': 'Ugly Number III', 'tags': [1, 7, 11]} ,
{'name': 'Smallest String With Swaps', 'tags': [1, 3, 5, 4]} ,
{'name': 'Sort Items by Groups Respecting Dependencies', 'tags': [2, 10]} ,
{'name': 'Last Person to Fit in the Bus', 'tags': [1, 12]} ,
{'name': 'Monthly Transactions II', 'tags': [1, 12]} ,
{'name': 'Design Skiplist', 'tags': [2, 30, 26]} ,
{'name': 'Unique Number of Occurrences', 'tags': [0, 3, 5]} ,
{'name': 'Get Equal Substrings Within Budget', 'tags': [1, 4, 11]} ,
{'name': 'Remove All Adjacent Duplicates in String II', 'tags': [1, 4, 22]} ,
{'name': 'Minimum Moves to Reach Target with Rotations', 'tags': [2, 3, 14, 13]} ,
{'name': 'Queries Quality and Percentage', 'tags': [0, 12]} ,
{'name': 'Team Scores in Football Tournament', 'tags': [1, 12]} ,
{'name': 'Intersection of Three Sorted Arrays', 'tags': [0, 3, 5, 11]} ,
{'name': 'Two Sum BSTs', 'tags': [1, 17, 11, 22]} ,
{'name': 'Stepping Numbers', 'tags': [1, 7, 28, 14]} ,
{'name': 'Valid Palindrome III', 'tags': [2, 4, 6]} ,
{'name': 'Minimum Cost to Move Chips to The Same Position', 'tags': [0, 3, 7, 9]} ,
{'name': 'Longest Arithmetic Subsequence of Given Difference', 'tags': [1, 3, 5]} ,
{'name': 'Path with Maximum Gold', 'tags': [1, 3, 28, 13]} ,
{'name': 'Count Vowels Permutation', 'tags': [2, 6]} ,
{'name': 'Split a String in Balanced Strings', 'tags': [0, 4, 9, 24]} ,
{'name': 'Queens That Can Attack the King', 'tags': [1, 3, 13, 20]} ,
{'name': 'Dice Roll Simulation', 'tags': [2, 3, 6]} ,
{'name': 'Maximum Equal Frequency', 'tags': [2, 3, 5]} ,
{'name': 'Report Contiguous Dates', 'tags': [2, 12]} ,
{'name': 'The Dining Philosophers', 'tags': [1, 60]} ,
{'name': 'Airplane Seat Assignment Probability', 'tags': [1, 7, 6]} ,
{'name': 'Missing Number In Arithmetic Progression', 'tags': [0, 3, 7]} ,
{'name': 'Meeting Scheduler', 'tags': [1, 3, 17, 8]} ,
{'name': 'Toss Strange Coins', 'tags': [1, 3, 7]} ,
{'name': 'Divide Chocolate', 'tags': [2, 3, 11]} ,
{'name': 'Check If It Is a Straight Line', 'tags': [0, 3, 7, 43]} ,
{'name': 'Remove Sub-Folders from the Filesystem', 'tags': [1, 3, 4, 10]} ,
{'name': 'Replace the Substring for Balanced String', 'tags': [1, 4, 25]} ,
{'name': 'Maximum Profit in Job Scheduling', 'tags': [2, 3, 11]} ,
{'name': 'Web Crawler', 'tags': [1, 4, 10]} ,
{'name': 'Find Positive Integer Solution for a Given Equation', 'tags': [1, 7, 17, 11]} ,
{'name': 'Circular Permutation in Binary Representation', 'tags': [1, 7, 28, 16]} ,
{'name': 'Maximum Length of a Concatenated String with Unique Characters', 'tags': [1, 3, 4, 28]} ,
{'name': 'Tiling a Rectangle with the Fewest Squares', 'tags': [2, 28]} ,
{'name': 'Number of Comments per Post', 'tags': [0, 12]} ,
{'name': 'Web Crawler Multithreaded', 'tags': [1, 10]} ,
{'name': 'Array Transformation', 'tags': [0, 3, 20]} ,
{'name': 'Design A Leaderboard', 'tags': [1, 5, 26, 8]} ,
{'name': 'Tree Diameter', 'tags': [1, 15, 10]} ,
{'name': 'Palindrome Removal', 'tags': [2, 3, 6]} ,
{'name': 'Minimum Swaps to Make Strings Equal', 'tags': [1, 7, 4, 9]} ,
{'name': 'Count Number of Nice Subarrays', 'tags': [1, 3, 5, 7]} ,
{'name': 'Minimum Remove to Make Valid Parentheses', 'tags': [1, 4, 22]} ,
{'name': 'Check If It Is a Good Array', 'tags': [2, 3, 7, 32]} ,
{'name': 'Average Selling Price', 'tags': [0, 12]} ,
{'name': 'Cells with Odd Values in a Matrix', 'tags': [0, 3, 7, 20]} ,
{'name': 'Reconstruct a 2-Row Binary Matrix', 'tags': [1, 3, 9, 13]} ,
{'name': 'Number of Closed Islands', 'tags': [1, 3, 10]} ,
{'name': 'Maximum Score Words Formed by Letters', 'tags': [2, 3, 4]} ,
{'name': 'Encode Number', 'tags': [1, 7, 4, 16]} ,
{'name': 'Smallest Common Region', 'tags': [1, 3, 5, 4]} ,
{'name': 'Synonymous Sentences', 'tags': [1, 3, 5, 4]} ,
{'name': "Handshakes That Don't Cross", 'tags': [2, 7, 6]} ,
{'name': 'Shift 2D Grid', 'tags': [0, 3, 13, 20]} ,
{'name': 'Find Elements in a Contaminated Binary Tree', 'tags': [1, 5, 15]} ,
{'name': 'Greatest Sum Divisible by Three', 'tags': [1, 3, 6]} ,
{'name': 'Minimum Moves to Move a Box to Their Target Location', 'tags': [2, 3, 14]} ,
{'name': 'Page Recommendations', 'tags': [1, 12]} ,
{'name': 'Print Immutable Linked List in Reverse', 'tags': [1, 30, 17, 22]} ,
{'name': 'Minimum Time Visiting All Points', 'tags': [0, 3, 7, 43]} ,
{'name': 'Count Servers that Communicate', 'tags': [1, 3, 10]} ,
{'name': 'Search Suggestions System', 'tags': [1, 3, 4, 11]} ,
{'name': 'Number of Ways to Stay in the Same Place After Some Steps', 'tags': [2, 6]} ,
{'name': 'All People Report to the Given Manager', 'tags': [1, 12]} ,
{'name': 'Hexspeak', 'tags': [0, 7, 4]} ,
{'name': 'Remove Interval', 'tags': [1, 3]} ,
{'name': 'Delete Tree Nodes', 'tags': [1, 3, 15, 10]} ,
{'name': 'Number of Ships in a Rectangle', 'tags': [2, 3, 40, 51]} ,
{'name': 'Find Winner on a Tic Tac Toe Game', 'tags': [0, 3, 5, 13]} ,
{'name': 'Number of Burgers with No Waste of Ingredients', 'tags': [1, 7]} ,
{'name': 'Count Square Submatrices with All Ones', 'tags': [1, 3, 6, 13]} ,
{'name': 'Palindrome Partitioning III', 'tags': [2, 4, 6]} ,
{'name': 'Traffic Light Controlled Intersection', 'tags': [0, 60]} ,
{'name': 'Students and Examinations', 'tags': [0, 12]} ,
{'name': 'Subtract the Product and Sum of Digits of an Integer', 'tags': [0, 7]} ,
{'name': 'Group the People Given the Group Size They Belong To', 'tags': [1, 3, 5, 9]} ,
{'name': 'Find the Smallest Divisor Given a Threshold', 'tags': [1, 3, 11]} ,
{'name': 'Minimum Number of Flips to Convert Binary Matrix to Zero Matrix', 'tags': [2, 3, 5]} ,
{'name': 'Find the Start and End Number of Continuous Ranges', 'tags': [1, 12]} ,
{'name': 'Iterator for Combination', 'tags': [1, 4, 28, 26]} ,
{'name': 'Element Appearing More Than 25% In Sorted Array', 'tags': [0, 3]} ,
{'name': 'Remove Covered Intervals', 'tags': [1, 3, 8]} ,
{'name': 'Minimum Falling Path Sum II', 'tags': [2, 3, 6, 13]} ,
{'name': 'Convert Binary Number in a Linked List to Integer', 'tags': [0, 30, 7]} ,
{'name': 'Sequential Digits', 'tags': [1, 27]} ,
{'name': 'Maximum Side Length of a Square with Sum Less than or Equal to Threshold', 'tags': [1, 3, 11, 13]} ,
{'name': 'Shortest Path in a Grid with Obstacles Elimination', 'tags': [2, 3, 14, 13]} ,
{'name': 'Weather Type in Each Country', 'tags': [0, 12]} ,
{'name': 'Find Numbers with Even Number of Digits', 'tags': [0, 3, 7]} ,
{'name': 'Divide Array in Sets of K Consecutive Numbers', 'tags': [1, 3, 5, 9]} ,
{'name': 'Maximum Number of Occurrences of a Substring', 'tags': [1, 5, 4, 25]} ,
{'name': 'Maximum Candies You Can Get from Boxes', 'tags': [2, 3, 14, 23]} ,
{'name': 'Replace Elements with Greatest Element on Right Side', 'tags': [0, 3]} ,
{'name': 'Sum of Mutated Array Closest to Target', 'tags': [1, 3, 11, 8]} ,
{'name': 'Number of Paths with Max Score', 'tags': [2, 3, 6, 13]} ,
{'name': 'Deepest Leaves Sum', 'tags': [1, 15, 10]} ,
{'name': 'Find the Team Size', 'tags': [0, 12]} ,
{'name': 'Find N Unique Integers Sum up to Zero', 'tags': [0, 3, 7]} ,
{'name': 'All Elements in Two Binary Search Trees', 'tags': [1, 15, 10]} ,
{'name': 'Jump Game III', 'tags': [1, 3, 10]} ,
{'name': 'Verbal Arithmetic Puzzle', 'tags': [2, 3, 7, 4]} ,
{'name': 'Running Total for Different Genders', 'tags': [1, 12]} ,
{'name': 'Decrypt String from Alphabet to Integer Mapping', 'tags': [0, 4]} ,
{'name': 'XOR Queries of a Subarray', 'tags': [1, 3, 16, 18]} ,
{'name': 'Get Watched Videos by Your Friends', 'tags': [1, 3, 5]} ,
{'name': 'Minimum Insertion Steps to Make a String Palindrome', 'tags': [2, 4, 6]} ,
{'name': 'Decompress Run-Length Encoded List', 'tags': [0, 3]} ,
{'name': 'Matrix Block Sum', 'tags': [1, 3, 13, 18]} ,
{'name': 'Sum of Nodes with Even-Valued Grandparent', 'tags': [1, 15, 10]} ,
{'name': 'Distinct Echo Substrings', 'tags': [2, 4, 35, 49]} ,
{'name': 'Convert Integer to the Sum of Two No-Zero Integers', 'tags': [0, 7]} ,
{'name': 'Minimum Flips to Make a OR b Equal to c', 'tags': [1, 16]} ,
{'name': 'Number of Operations to Make Network Connected', 'tags': [1, 10]} ,
{'name': 'Minimum Distance to Type a Word Using Two Fingers', 'tags': [2, 4, 6]} ,
{'name': 'Restaurant Growth', 'tags': [1, 12]} ,
{'name': 'Ads Performance', 'tags': [0, 12]} ,
{'name': 'Maximum 69 Number', 'tags': [0, 7, 9]} ,
{'name': 'Print Words Vertically', 'tags': [1, 3, 4, 20]} ,
{'name': 'Delete Leaves With a Given Value', 'tags': [1, 15, 10, 21]} ,
{'name': 'Minimum Number of Taps to Open to Water a Garden', 'tags': [2, 3, 6, 9]} ,
{'name': 'List the Products Ordered in a Period', 'tags': [0, 12]} ,
{'name': 'Break a Palindrome', 'tags': [1, 4, 9]} ,
{'name': 'Sort the Matrix Diagonally', 'tags': [1, 3, 8, 13]} ,
{'name': 'Reverse Subarray To Maximize Array Value', 'tags': [2, 3, 7, 9]} ,
{'name': 'Rank Transform of an Array', 'tags': [0, 3, 5, 8]} ,
{'name': 'Remove Palindromic Subsequences', 'tags': [0, 17, 4]} ,
{'name': 'Filter Restaurants by Vegan-Friendly, Price and Distance', 'tags': [1, 3, 8]} ,
{'name': 'Find the City With the Smallest Number of Neighbors at a Threshold Distance', 'tags': [1, 6, 23]} ,
{'name': 'Minimum Difficulty of a Job Schedule', 'tags': [2, 3, 6]} ,
{'name': 'Number of Transactions per Visit', 'tags': [2, 12]} ,
{'name': 'The K Weakest Rows in a Matrix', 'tags': [0, 3, 11, 8]} ,
{'name': 'Reduce Array Size to The Half', 'tags': [1, 3, 5, 9]} ,
{'name': 'Maximum Product of Splitted Binary Tree', 'tags': [1, 15, 10, 21]} ,
{'name': 'Jump Game V', 'tags': [2, 3, 6, 8]} ,
{'name': 'Movie Rating', 'tags': [1, 12]} ,
{'name': 'Number of Steps to Reduce a Number to Zero', 'tags': [0, 7, 16]} ,
{'name': 'Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold', 'tags': [1, 3, 25]} ,
{'name': 'Angle Between Hands of a Clock', 'tags': [1, 7]} ,
{'name': 'Jump Game IV', 'tags': [2, 3, 5, 14]} ,
{'name': 'Check If N and Its Double Exist', 'tags': [0, 3, 5, 17]} ,
{'name': 'Minimum Number of Steps to Make Two Strings Anagram', 'tags': [1, 5, 4, 24]} ,
{'name': 'Tweet Counts Per Frequency', 'tags': [1, 5, 11, 26]} ,
{'name': 'Maximum Students Taking Exam', 'tags': [2, 3, 6]} ,
{'name': 'Students With Invalid Departments', 'tags': [0, 12]} ,
{'name': 'Count Negative Numbers in a Sorted Matrix', 'tags': [0, 3, 11, 13]} ,
{'name': 'Product of the Last K Numbers', 'tags': [1, 3, 7, 26]} ,
{'name': 'Maximum Number of Events That Can Be Attended', 'tags': [1, 3, 9, 8]} ,
{'name': 'Construct Target Array With Multiple Sums', 'tags': [2, 3]} ,
{'name': 'Activity Participants', 'tags': [1, 12]} ,
{'name': 'Sort Integers by The Number of 1 Bits', 'tags': [0, 3, 16, 8]} ,
{'name': 'Apply Discount Every n Orders', 'tags': [1, 3, 5, 26]} ,
{'name': 'Number of Substrings Containing All Three Characters', 'tags': [1, 5, 4, 25]} ,
{'name': 'Count All Valid Pickup and Delivery Options', 'tags': [2, 7, 6]} ,
{'name': 'Number of Days Between Two Dates', 'tags': [0, 7, 4]} ,
{'name': 'Validate Binary Tree Nodes', 'tags': [1, 15, 10]} ,
{'name': 'Closest Divisors', 'tags': [1, 7]} ,
{'name': 'Largest Multiple of Three', 'tags': [2, 3, 6, 9]} ,
{'name': 'Number of Trusted Contacts of a Customer', 'tags': [1, 12]} ,
{'name': 'How Many Numbers Are Smaller Than the Current Number', 'tags': [0, 3, 5, 8]} ,
{'name': 'Rank Teams by Votes', 'tags': [1, 3, 5, 4]} ,
{'name': 'Linked List in Binary Tree', 'tags': [1, 30, 15]} ,
{'name': 'Minimum Cost to Make at Least One Valid Path in a Grid', 'tags': [2, 3, 14, 23]} ,
{'name': 'Get the Second Most Recent Activity', 'tags': [2, 12]} ,
{'name': 'Increasing Decreasing String', 'tags': [0, 5, 4, 24]} ,
{'name': 'Find the Longest Substring Containing Vowels in Even Counts', 'tags': [1, 5, 4]} ,
{'name': 'Longest ZigZag Path in a Binary Tree', 'tags': [1, 6, 15]} ,
{'name': 'Maximum Sum BST in Binary Tree', 'tags': [2, 6, 15]} ,
{'name': 'Generate a String With Characters That Have Odd Counts', 'tags': [0, 4]} ,
{'name': 'Number of Times Binary String Is Prefix-Aligned', 'tags': [1, 3]} ,
{'name': 'Time Needed to Inform All Employees', 'tags': [1, 15, 10]} ,
{'name': 'Frog Position After T Seconds', 'tags': [2, 15, 10]} ,
{'name': 'Replace Employee ID With The Unique Identifier', 'tags': [0, 12]} ,
{'name': 'Find a Corresponding Node of a Binary Tree in a Clone of That Tree', 'tags': [0, 15, 10]} ,
{'name': 'Lucky Numbers in a Matrix', 'tags': [0, 3, 13]} ,
{'name': 'Design a Stack With Increment Operation', 'tags': [1, 3, 22, 26]} ,
{'name': 'Balance a Binary Search Tree', 'tags': [1, 40, 9, 15]} ,
{'name': 'Maximum Performance of a Team', 'tags': [2, 3, 9, 8]} ,
{'name': 'Total Sales Amount by Year', 'tags': [2, 12]} ,
{'name': 'Find the Distance Value Between Two Arrays', 'tags': [0, 3, 17, 11]} ,
{'name': 'Cinema Seat Allocation', 'tags': [1, 3, 5, 9]} ,
{'name': 'Sort Integers by The Power Value', 'tags': [1, 6]} ,
{'name': 'Pizza With 3n Slices', 'tags': [2, 3, 6]} ,
{'name': 'Create Target Array in the Given Order', 'tags': [0, 3, 20]} ,
{'name': 'Four Divisors', 'tags': [1, 3, 7]} ,
{'name': 'Check if There is a Valid Path in a Grid', 'tags': [1, 3, 10]} ,
{'name': 'Longest Happy Prefix', 'tags': [2, 4, 49]} ,
{'name': 'Capital Gain/Loss', 'tags': [1, 12]} ,
{'name': 'Find Lucky Integer in an Array', 'tags': [0, 3, 5, 24]} ,
{'name': 'Count Number of Teams', 'tags': [1, 3, 6]} ,
{'name': 'Design Underground System', 'tags': [1, 5, 4, 26]} ,
{'name': 'Find All Good Strings', 'tags': [2, 4, 6]} ,
{'name': 'Customers Who Bought Products A and B but Not C', 'tags': [1, 12]} ,
{'name': 'Count Largest Group', 'tags': [0, 5, 7]} ,
{'name': 'Construct K Palindrome Strings', 'tags': [1, 5, 4, 9]} ,
{'name': 'Circle and Rectangle Overlapping', 'tags': [1, 7, 43]} ,
{'name': 'Reducing Dishes', 'tags': [2, 3, 6]} ,
{'name': 'Minimum Subsequence in Non-Increasing Order', 'tags': [0, 3, 9, 8]} ,
{'name': 'Number of Steps to Reduce a Number in Binary Representation to One', 'tags': [1, 4, 16]} ,
{'name': 'Longest Happy String', 'tags': [1, 4, 9]} ,
{'name': 'Stone Game III', 'tags': [2, 3, 7]} ,
{'name': 'Top Travellers', 'tags': [0, 12]} ,
{'name': 'String Matching in an Array', 'tags': [0, 3, 4, 46]} ,
{'name': 'Queries on a Permutation With Key', 'tags': [1, 3, 42, 20]} ,
{'name': 'HTML Entity Parser', 'tags': [1, 5, 4]} ,
{'name': 'Number of Ways to Paint N Ã— 3 Grid', 'tags': [2, 6]} ,
{'name': 'Find the Quiet Students in All Exams', 'tags': [2, 12]} ,
{'name': 'Minimum Value to Get Positive Step by Step Sum', 'tags': [0, 3, 18]} ,
{'name': 'Find the Minimum Number of Fibonacci Numbers Whose Sum Is K', 'tags': [1, 7, 9]} ,
{'name': 'The k-th Lexicographical String of All Happy Strings of Length n', 'tags': [1, 4, 28]} ,
{'name': 'Restore The Array', 'tags': [2, 4, 6]} ,
{'name': 'Reformat The String', 'tags': [0, 4]} ,
{'name': 'Display Table of Food Orders in a Restaurant', 'tags': [1, 3, 5, 4]} ,
{'name': 'Minimum Number of Frogs Croaking', 'tags': [1, 4, 24]} ,
{'name': 'Build Array Where You Can Find The Maximum Exactly K Comparisons', 'tags': [2, 6, 18]} ,
{'name': 'NPV Queries', 'tags': [0, 12]} ,
{'name': 'Maximum Score After Splitting a String', 'tags': [0, 4, 18]} ,
{'name': 'Maximum Points You Can Obtain from Cards', 'tags': [1, 3, 25, 18]} ,
{'name': 'Diagonal Traverse II', 'tags': [1, 3, 8]} ,
{'name': 'Constrained Subsequence Sum', 'tags': [2, 3, 6]} ,
{'name': 'Counting Elements', 'tags': [0, 3, 5]} ,
{'name': 'Perform String Shifts', 'tags': [0, 3, 7, 4]} ,
{'name': 'Leftmost Column with at Least a One', 'tags': [1, 3, 11, 13]} ,
{'name': 'First Unique Number', 'tags': [1, 3, 5, 26]} ,
{'name': 'Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree', 'tags': [1, 15, 10]} ,
{'name': 'Kids With the Greatest Number of Candies', 'tags': [0, 3]} ,
{'name': 'Max Difference You Can Get From Changing an Integer', 'tags': [1, 7, 9]} ,
{'name': 'Check If a String Can Break Another String', 'tags': [1, 4, 9, 8]} ,
{'name': 'Number of Ways to Wear Different Hats to Each Other', 'tags': [2, 3, 6]} ,
{'name': 'Create a Session Bar Chart', 'tags': [0, 12]} ,
{'name': 'Destination City', 'tags': [0, 3, 5, 4]} ,
{'name': "Check If All 1's Are at Least Length K Places Away", 'tags': [0, 3]} ,
{'name': 'Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit', 'tags': [1, 3, 38, 25]} ,
{'name': 'Find the Kth Smallest Sum of a Matrix With Sorted Rows', 'tags': [2, 3, 11]} ,
{'name': 'Evaluate Boolean Expression', 'tags': [1, 12]} ,
{'name': 'Build an Array With Stack Operations', 'tags': [1, 3, 22, 20]} ,
{'name': 'Count Triplets That Can Form Two Arrays of Equal XOR', 'tags': [1, 3, 5, 7]} ,
{'name': 'Minimum Time to Collect All Apples in a Tree', 'tags': [1, 5, 15]} ,
{'name': 'Number of Ways of Cutting a Pizza', 'tags': [2, 3, 6]} ,
{'name': 'Apples & Oranges', 'tags': [1, 12]} ,
{'name': 'Consecutive Characters', 'tags': [0, 4]} ,
{'name': 'Simplified Fractions', 'tags': [1, 7, 4, 32]} ,
{'name': 'Count Good Nodes in Binary Tree', 'tags': [1, 15, 10]} ,
{'name': 'Form Largest Integer With Digits That Add up to Target', 'tags': [2, 3, 6]} ,
{'name': 'Number of Students Doing Homework at a Given Time', 'tags': [0, 3]} ,
{'name': 'Rearrange Words in a Sentence', 'tags': [1, 4, 8]} ,
{'name': 'People Whose List of Favorite Companies Is Not a Subset of Another List', 'tags': [1, 3, 5, 4]} ,
{'name': 'Maximum Number of Darts Inside of a Circular Dartboard', 'tags': [2, 3, 7, 43]} ,
{'name': 'Active Users', 'tags': [1, 12]} ,
{'name': 'Check If a Word Occurs As a Prefix of Any Word in a Sentence', 'tags': [0, 17, 4, 46]} ,
{'name': 'Maximum Number of Vowels in a Substring of Given Length', 'tags': [1, 4, 25]} ,
{'name': 'Pseudo-Palindromic Paths in a Binary Tree', 'tags': [1, 16, 15]} ,
{'name': 'Max Dot Product of Two Subsequences', 'tags': [2, 3, 6]} ,
{'name': 'Rectangles Area', 'tags': [1, 12]} ,
{'name': 'Make Two Arrays Equal by Reversing Subarrays', 'tags': [0, 3, 5, 8]} ,
{'name': 'Check If a String Contains All Binary Codes of Size K', 'tags': [1, 5, 4]} ,
{'name': 'Course Schedule IV', 'tags': [1, 10]} ,
{'name': 'Cherry Pickup II', 'tags': [2, 3, 6, 13]} ,
{'name': 'Maximum Product of Two Elements in an Array', 'tags': [0, 3, 8]} ,
{'name': 'Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts', 'tags': [1, 3, 9, 8]} ,
{'name': 'Reorder Routes to Make All Paths Lead to the City Zero', 'tags': [1, 10]} ,
{'name': 'Probability of a Two Boxes Having The Same Number of Distinct Balls', 'tags': [2, 3, 7]} ,
{'name': 'Calculate Salaries', 'tags': [1, 12]} ,
{'name': 'Find All The Lonely Nodes', 'tags': [0, 15, 10]} ,
{'name': 'Shuffle the Array', 'tags': [0, 3]} ,
{'name': 'The k Strongest Values in an Array', 'tags': [1, 3, 17, 8]} ,
{'name': 'Design Browser History', 'tags': [1, 3, 30, 22]} ,
{'name': 'Paint House III', 'tags': [2, 3, 6]} ,
{'name': 'Delete N Nodes After M Nodes of a Linked List', 'tags': [0, 30]} ,
{'name': 'Final Prices With a Special Discount in a Shop', 'tags': [0, 3, 22, 33]} ,
{'name': 'Subrectangle Queries', 'tags': [1, 3, 26, 13]} ,
{'name': 'Find Two Non-overlapping Sub-arrays Each With Target Sum', 'tags': [1, 3, 5, 11]} ,
{'name': 'Allocate Mailboxes', 'tags': [2, 3, 7]} ,
{'name': 'Sales by Day of the Week', 'tags': [2, 12]} ,
{'name': 'Running Sum of 1d Array', 'tags': [0, 3, 18]} ,
{'name': 'Least Number of Unique Integers after K Removals', 'tags': [1, 3, 5, 9]} ,
{'name': 'Minimum Number of Days to Make m Bouquets', 'tags': [1, 3, 11]} ,
{'name': 'Kth Ancestor of a Tree Node', 'tags': [2, 11]} ,
{'name': 'Group Sold Products By The Date', 'tags': [0, 12]} ,
{'name': 'Clone Binary Tree With Random Pointer', 'tags': [1, 5, 15]} ,
{'name': 'XOR Operation in an Array', 'tags': [0, 7, 16]} ,
{'name': 'Making File Names Unique', 'tags': [1, 3, 5, 4]} ,
{'name': 'Avoid Flood in The City', 'tags': [1, 3, 5, 11]} ,
{'name': 'Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree', 'tags': [2, 29, 23, 8]} ,
{'name': 'Clone N-ary Tree', 'tags': [1, 5, 15]} ,
{'name': 'Average Salary Excluding the Minimum and Maximum Salary', 'tags': [0, 3, 8]} ,
{'name': 'The kth Factor of n', 'tags': [1, 7, 32]} ,
{'name': "Longest Subarray of 1's After Deleting One Element", 'tags': [1, 3, 6]} ,
{'name': 'Parallel Courses II', 'tags': [2, 6]} ,
{'name': 'Friendly Movies Streamed Last Month', 'tags': [0, 12]} ,
{'name': 'Path Crossing', 'tags': [0, 5, 4]} ,
{'name': 'Check If Array Pairs Are Divisible by k', 'tags': [1, 3, 5, 24]} ,
{'name': 'Number of Subsequences That Satisfy the Given Sum Condition', 'tags': [1, 3, 17, 11]} ,
{'name': 'Max Value of Equation', 'tags': [2, 3, 38, 25]} ,
{'name': 'Design a File Sharing System', 'tags': [1, 5, 26, 8]} ,
{'name': 'Countries You Can Safely Invest In', 'tags': [1, 12]} ,
{'name': 'Can Make Arithmetic Progression From Sequence', 'tags': [0, 3, 8]} ,
{'name': 'Last Moment Before All Ants Fall Out of a Plank', 'tags': [1, 3, 54, 20]} ,
{'name': 'Count Submatrices With All Ones', 'tags': [1, 3, 6]} ,
{'name': 'Minimum Possible Integer After at Most K Adjacent Swaps On Digits', 'tags': [2, 4, 9]} ,
{'name': 'Find Root of N-Ary Tree', 'tags': [1, 5, 16, 15]} ,
{'name': 'Reformat Date', 'tags': [0, 4]} ,
{'name': 'Range Sum of Sorted Subarray Sums', 'tags': [1, 3, 17, 11]} ,
{'name': 'Minimum Difference Between Largest and Smallest Value in Three Moves', 'tags': [1, 3, 9, 8]} ,
{'name': 'Stone Game IV', 'tags': [2, 7, 6]} ,
{'name': 'Customer Order Frequency', 'tags': [0, 12]} ,
{'name': 'Number of Good Pairs', 'tags': [0, 3, 5, 7]} ,
{'name': 'Number of Substrings With Only 1s', 'tags': [1, 7, 4]} ,
{'name': 'Path with Maximum Probability', 'tags': [1, 3, 23]} ,
{'name': 'Best Position for a Service Centre', 'tags': [2, 3, 7, 43]} ,
{'name': 'Move Sub-Tree of N-Ary Tree', 'tags': [2, 15, 10]} ,
{'name': 'Find Users With Valid E-Mails', 'tags': [0, 12]} ,
{'name': 'Water Bottles', 'tags': [0, 7, 20]} ,
{'name': 'Number of Nodes in the Sub-Tree With the Same Label', 'tags': [1, 5, 15]} ,
{'name': 'Maximum Number of Non-Overlapping Substrings', 'tags': [2, 4, 9]} ,
{'name': 'Find a Value of a Mysterious Function Closest to Target', 'tags': [2, 3, 11]} ,
{'name': 'Diameter of N-Ary Tree', 'tags': [1, 15, 10]} ,
{'name': 'Count Odd Numbers in an Interval Range', 'tags': [0, 7]} ,
{'name': 'Number of Sub-arrays With Odd Sum', 'tags': [1, 3, 7]} ,
{'name': 'Number of Good Ways to Split a String', 'tags': [1, 5, 4]} ,
{'name': 'Minimum Number of Increments on Subarrays to Form a Target Array', 'tags': [2, 3, 6]} ,
{'name': 'Patients With a Condition', 'tags': [0, 12]} ,
{'name': 'Shuffle String', 'tags': [0, 3, 4]} ,
{'name': 'Minimum Suffix Flips', 'tags': [1, 4, 9]} ,
{'name': 'Number of Good Leaf Nodes Pairs', 'tags': [1, 15, 10, 21]} ,
{'name': 'String Compression II', 'tags': [2, 4, 6]} ,
{'name': 'The Most Recent Three Orders', 'tags': [1, 12]} ,
{'name': 'Find the Index of the Large Integer', 'tags': [1, 3, 11, 51]} ,
{'name': 'Count Good Triplets', 'tags': [0, 3, 27]} ,
{'name': 'Find the Winner of an Array Game', 'tags': [1, 3, 20]} ,
{'name': 'Minimum Swaps to Arrange a Binary Grid', 'tags': [1, 3, 9, 13]} ,
{'name': 'Get the Maximum Score', 'tags': [2, 3, 17]} ,
{'name': 'Guess the Majority in a Hidden Array', 'tags': [1, 3, 7, 51]} ,
{'name': 'Kth Missing Positive Number', 'tags': [0, 3, 11]} ,
{'name': 'Can Convert String in K Moves', 'tags': [1, 5, 4]} ,
{'name': 'Minimum Insertions to Balance a Parentheses String', 'tags': [1, 4, 22, 9]} ,
{'name': 'Find Longest Awesome Substring', 'tags': [2, 5, 4, 16]} ,
{'name': 'Fix Product Name Format', 'tags': [0, 12]} ,
{'name': 'Make The String Great', 'tags': [0, 4, 22]} ,
{'name': 'Find Kth Bit in Nth Binary String', 'tags': [1, 4, 39, 20]} ,
{'name': 'Maximum Number of Non-Overlapping Subarrays With Sum Equals Target', 'tags': [1, 3, 5, 9]} ,
{'name': 'Minimum Cost to Cut a Stick', 'tags': [2, 3, 6, 8]} ,
{'name': 'The Most Similar Path in a Graph', 'tags': [2, 6, 23]} ,
{'name': 'The Most Recent Orders for Each Product', 'tags': [1, 12]} ,
{'name': 'Three Consecutive Odds', 'tags': [0, 3]} ,
{'name': 'Minimum Operations to Make Array Equal', 'tags': [1, 7]} ,
{'name': 'Magnetic Force Between Two Balls', 'tags': [1, 3, 11, 8]} ,
{'name': 'Minimum Number of Days to Eat N Oranges', 'tags': [2, 6, 41]} ,
{'name': 'Strings Differ by One Character', 'tags': [1, 5, 4, 49]} ,
{'name': 'Bank Account Summary', 'tags': [1, 12]} ,
{'name': 'Thousand Separator', 'tags': [0, 4]} ,
{'name': 'Minimum Number of Vertices to Reach All Nodes', 'tags': [1, 23]} ,
{'name': 'Minimum Numbers of Function Calls to Make Target Array', 'tags': [1, 3, 9, 16]} ,
{'name': 'Detect Cycles in 2D Grid', 'tags': [1, 3, 10]} ,
{'name': 'Most Visited Sector in a Circular Track', 'tags': [0, 3, 20]} ,
{'name': 'Maximum Number of Coins You Can Get', 'tags': [1, 3, 7, 9]} ,
{'name': 'Find Latest Group of Size M', 'tags': [1, 3, 5, 11]} ,
{'name': 'Stone Game V', 'tags': [2, 3, 7]} ,
{'name': 'Put Boxes Into the Warehouse I', 'tags': [1, 3, 9, 8]} ,
{'name': 'Unique Orders and Customers Per Month', 'tags': [0, 12]} ,
{'name': 'Detect Pattern of Length M Repeated K or More Times', 'tags': [0, 3, 27]} ,
{'name': 'Maximum Length of Subarray With Positive Product', 'tags': [1, 3, 6, 9]} ,
{'name': 'Minimum Number of Days to Disconnect Island', 'tags': [2, 3, 10]} ,
{'name': 'Number of Ways to Reorder Array to Get Same BST', 'tags': [2, 3, 7, 40]} ,
{'name': 'Dot Product of Two Sparse Vectors', 'tags': [1, 3, 5, 17]} ,
{'name': 'Warehouse Manager', 'tags': [0, 12]} ,
{'name': 'Matrix Diagonal Sum', 'tags': [0, 3, 13]} ,
{'name': 'Number of Ways to Split a String', 'tags': [1, 7, 4]} ,
{'name': 'Shortest Subarray to be Removed to Make Array Sorted', 'tags': [1, 3, 17, 11]} ,
{'name': 'Count All Possible Routes', 'tags': [2, 3, 6]} ,
{'name': "Replace All ?'s to Avoid Consecutive Repeating Characters", 'tags': [0, 4]} ,
{'name': 'Number of Ways Where Square of Number Is Equal to Product of Two Numbers', 'tags': [1, 3, 5, 7]} ,
{'name': 'Minimum Time to Make Rope Colorful', 'tags': [1, 3, 4]} ,
{'name': 'Remove Max Number of Edges to Keep Graph Fully Traversable', 'tags': [2, 29, 23]} ,
{'name': 'Put Boxes Into the Warehouse II', 'tags': [1, 3, 9, 8]} ,
{'name': 'Customer Who Visited but Did Not Make Any Transactions', 'tags': [0, 12]} ,
{'name': 'Special Positions in a Binary Matrix', 'tags': [0, 3, 13]} ,
{'name': 'Count Unhappy Friends', 'tags': [1, 3, 20]} ,
{'name': 'Min Cost to Connect All Points', 'tags': [1, 3, 29, 23]} ,
{'name': 'Check If String Is Transformable With Substring Sort Operations', 'tags': [2, 4, 9, 8]} ,
{'name': 'Binary Search Tree Iterator II', 'tags': [1, 22, 15, 26]} ,
{'name': 'Bank Account Summary II', 'tags': [0, 12]} ,
{'name': 'Sum of All Odd Length Subarrays', 'tags': [0, 3, 7, 18]} ,
{'name': 'Maximum Sum Obtained of Any Permutation', 'tags': [1, 3, 9, 8]} ,
{'name': 'Make Sum Divisible by P', 'tags': [1, 3, 5, 18]} ,
{'name': 'Strange Printer II', 'tags': [2, 3, 23, 47]} ,
{'name': 'Rearrange Spaces Between Words', 'tags': [0, 4]} ,
{'name': 'Split a String Into the Max Number of Unique Substrings', 'tags': [1, 5, 4, 28]} ,
{'name': 'Maximum Non Negative Product in a Matrix', 'tags': [1, 3, 6, 13]} ,
{'name': 'Minimum Cost to Connect Two Groups of Points', 'tags': [2, 3, 6]} ,
{'name': 'The Most Frequently Ordered Products for Each Customer', 'tags': [1, 12]} ,
{'name': 'Build Binary Expression Tree From Infix Expression', 'tags': [2, 4, 22, 15]} ,
{'name': 'Crawler Log Folder', 'tags': [0, 3, 4, 22]} ,
{'name': 'Maximum Profit of Operating a Centennial Wheel', 'tags': [1, 3, 20]} ,
{'name': 'Throne Inheritance', 'tags': [1, 5, 15]} ,
{'name': 'Maximum Number of Achievable Transfer Requests', 'tags': [2, 3, 28]} ,
{'name': 'Find Nearest Right Node in Binary Tree', 'tags': [1, 15, 14]} ,
{'name': 'Design Parking System', 'tags': [0, 26, 20, 24]} ,
{'name': 'Alert Using Same Key-Card Three or More Times', 'tags': [1, 5, 4, 25, 8]} ,
{'name': 'Find Valid Matrix Given Row and Column Sums', 'tags': [1, 9, 13]} ,
{'name': 'Find Servers That Handled Most Number of Requests', 'tags': [2, 3, 9]} ,
{'name': 'Sellers With No Sales', 'tags': [0, 12]} ,
{'name': 'Special Array With X Elements Greater Than or Equal X', 'tags': [0, 3, 11, 8]} ,
{'name': 'Even Odd Tree', 'tags': [1, 15, 14, 21]} ,
{'name': 'Maximum Number of Visible Points', 'tags': [2, 3, 7, 43]} ,
{'name': 'Minimum One Bit Operations to Make Integers Zero', 'tags': [2, 6]} ,
{'name': 'Check If Two Expression Trees are Equivalent', 'tags': [1, 5, 15]} ,
{'name': 'Find the Missing IDs', 'tags': [1, 12]} ,
{'name': 'Maximum Nesting Depth of the Parentheses', 'tags': [0, 4, 22]} ,
{'name': 'Maximal Network Rank', 'tags': [1, 23]} ,
{'name': 'Split Two Strings to Make Palindrome', 'tags': [1, 17, 4]} ,
{'name': 'Count Subtrees With Max Distance Between Cities', 'tags': [2, 6]} ,
{'name': 'Maximum Font to Fit a Sentence in a Screen', 'tags': [1, 3, 4, 11]} ,
{'name': 'Mean of Array After Removing Some Elements', 'tags': [0, 3, 8]} ,
{'name': 'Coordinate With Maximum Network Quality', 'tags': [1, 3, 27]} ,
{'name': 'Number of Sets of K Non-Overlapping Line Segments', 'tags': [1, 7, 6]} ,
{'name': 'Fancy Sequence', 'tags': [2, 7, 26, 34]} ,
{'name': 'All Valid Triplets That Can Represent a Country', 'tags': [0, 12]} ,
{'name': 'Largest Substring Between Two Equal Characters', 'tags': [0, 5, 4]} ,
{'name': 'Lexicographically Smallest String After Applying Operations', 'tags': [1, 4, 10]} ,
{'name': 'Best Team With No Conflicts', 'tags': [1, 3, 6, 8]} ,
{'name': 'Graph Connectivity With Threshold', 'tags': [2, 3, 7, 29]} ,
{'name': 'Design an Expression Tree With Evaluate Function', 'tags': [1, 3, 7, 22]} ,
{'name': 'Slowest Key', 'tags': [0, 3, 4]} ,
{'name': 'Arithmetic Subarrays', 'tags': [1, 3, 5, 8]} ,
{'name': 'Path With Minimum Effort', 'tags': [1, 3, 11]} ,
{'name': 'Rank Transform of a Matrix', 'tags': [2, 3, 29, 23]} ,
{'name': 'Percentage of Users Attended a Contest', 'tags': [0, 12]} ,
{'name': 'Add Two Polynomials Represented as Linked Lists', 'tags': [1, 30, 7, 17]} ,
{'name': 'Hopper Company Queries I', 'tags': [2, 12]} ,
{'name': 'Sort Array by Increasing Frequency', 'tags': [0, 3, 5, 8]} ,
{'name': 'Widest Vertical Area Between Two Points Containing No Points', 'tags': [0, 3, 8]} ,
{'name': 'Count Substrings That Differ by One Character', 'tags': [1, 5, 4]} ,
{'name': 'Number of Ways to Form a Target String Given a Dictionary', 'tags': [2, 3, 4, 6]} ,
{'name': 'Check Array Formation Through Concatenation', 'tags': [0, 3, 5]} ,
{'name': 'Count Sorted Vowel Strings', 'tags': [1, 7, 6]} ,
{'name': 'Furthest Building You Can Reach', 'tags': [1, 3, 9]} ,
{'name': 'Kth Smallest Instructions', 'tags': [2, 3, 7]} ,
{'name': 'Lowest Common Ancestor of a Binary Tree II', 'tags': [1, 15, 10, 21]} ,
{'name': 'Hopper Company Queries II', 'tags': [2, 12]} ,
{'name': 'Get Maximum in Generated Array', 'tags': [0, 3, 20]} ,
{'name': 'Minimum Deletions to Make Character Frequencies Unique', 'tags': [1, 5, 4, 9]} ,
{'name': 'Sell Diminishing-Valued Colored Balls', 'tags': [1, 3, 7, 11]} ,
{'name': 'Create Sorted Array through Instructions', 'tags': [2, 3, 11]} ,
{'name': 'Lowest Common Ancestor of a Binary Tree III', 'tags': [1, 5, 17, 15]} ,
{'name': 'Hopper Company Queries III', 'tags': [2, 12]} ,
{'name': 'Defuse the Bomb', 'tags': [0, 3, 25]} ,
{'name': 'Minimum Deletions to Make String Balanced', 'tags': [1, 4, 6, 22]} ,
{'name': 'Minimum Jumps to Reach Home', 'tags': [1, 3, 6]} ,
{'name': 'Distribute Repeating Integers', 'tags': [2, 3, 6]} ,
{'name': 'Design an Ordered Stream', 'tags': [0, 3, 5, 26]} ,
{'name': 'Determine if Two Strings Are Close', 'tags': [1, 5, 4, 8]} ,
{'name': 'Minimum Operations to Reduce X to Zero', 'tags': [1, 3, 5, 11]} ,
{'name': 'Maximize Grid Happiness', 'tags': [2, 6]} ,
{'name': 'Correct a Binary Tree', 'tags': [1, 5, 15]} ,
{'name': 'Average Time of Process per Machine', 'tags': [0, 12]} ,
{'name': 'Check If Two String Arrays are Equivalent', 'tags': [0, 3, 4]} ,
{'name': 'Smallest String With A Given Numeric Value', 'tags': [1, 4, 9]} ,
{'name': 'Ways to Make a Fair Array', 'tags': [1, 3, 18]} ,
{'name': 'Minimum Initial Energy to Finish Tasks', 'tags': [2, 3, 9, 8]} ,
{'name': 'Change the Root of a Binary Tree', 'tags': [1, 15, 10, 21]} ,
{'name': 'Fix Names in a Table', 'tags': [0, 12]} ,
{'name': 'Maximum Repeating Substring', 'tags': [0, 4, 6]} ,
{'name': 'Merge In Between Linked Lists', 'tags': [1, 30]} ,
{'name': 'Design Front Middle Back Queue', 'tags': [1, 3, 30, 26]} ,
{'name': 'Minimum Number of Removals to Make Mountain Array', 'tags': [2, 3, 11]} ,
{'name': 'Richest Customer Wealth', 'tags': [0, 3, 13]} ,
{'name': 'Find the Most Competitive Subsequence', 'tags': [1, 3, 22, 9]} ,
{'name': 'Minimum Moves to Make Array Complementary', 'tags': [1, 3, 5, 18]} ,
{'name': 'Minimize Deviation in Array', 'tags': [2, 3, 9]} ,
{'name': 'Lowest Common Ancestor of a Binary Tree IV', 'tags': [1, 5, 15]} ,
{'name': "Product's Worth Over Invoices", 'tags': [0, 12]} ,
{'name': 'Goal Parser Interpretation', 'tags': [0, 4]} ,
{'name': 'Max Number of K-Sum Pairs', 'tags': [1, 3, 5, 17]} ,
{'name': 'Concatenation of Consecutive Binary Numbers', 'tags': [1, 7, 16, 20]} ,
{'name': 'Minimum Incompatibility', 'tags': [2, 3, 6]} ,
{'name': 'Longest Palindromic Subsequence II', 'tags': [1, 4, 6]} ,
{'name': 'Invalid Tweets', 'tags': [0, 12]} ,
{'name': 'Count the Number of Consistent Strings', 'tags': [0, 3, 5, 4]} ,
{'name': 'Sum of Absolute Differences in a Sorted Array', 'tags': [1, 3, 7, 18]} ,
{'name': 'Stone Game VI', 'tags': [1, 3, 7, 9]} ,
{'name': 'Delivering Boxes from Storage to Ports', 'tags': [2, 3, 6]} ,
{'name': 'Count of Matches in Tournament', 'tags': [0, 7, 20]} ,
{'name': 'Partitioning Into Minimum Number Of Deci-Binary Numbers', 'tags': [1, 4, 9]} ,
{'name': 'Stone Game VII', 'tags': [1, 3, 7]} ,
{'name': 'Maximum Height by Stacking Cuboids', 'tags': [2, 3, 6, 8]} ,
{'name': 'Count Ways to Distribute Candies', 'tags': [2, 6]} ,
{'name': 'Daily Leads and Partners', 'tags': [0, 12]} ,
{'name': 'Reformat Phone Number', 'tags': [0, 4]} ,
{'name': 'Maximum Erasure Value', 'tags': [1, 3, 5, 25]} ,
{'name': 'Jump Game VI', 'tags': [1, 3, 6]} ,
{'name': 'Checking Existence of Edge Length Limited Paths', 'tags': [2, 3, 17, 29]} ,
{'name': 'Number of Distinct Substrings in a String', 'tags': [1, 4, 35, 49]} ,
{'name': 'Number of Calls Between Two Persons', 'tags': [1, 12]} ,
{'name': 'Number of Students Unable to Eat Lunch', 'tags': [0, 3, 22, 38]} ,
{'name': 'Average Waiting Time', 'tags': [1, 3, 20]} ,
{'name': 'Maximum Binary String After Change', 'tags': [1, 4, 9]} ,
{'name': 'Minimum Adjacent Swaps for K Consecutive Ones', 'tags': [2, 3, 9, 25]} ,
{'name': 'Determine if String Halves Are Alike', 'tags': [0, 4, 24]} ,
{'name': 'Maximum Number of Eaten Apples', 'tags': [1, 3, 9]} ,
{'name': 'Where Will the Ball Fall', 'tags': [1, 3, 13, 20]} ,
{'name': 'Maximum XOR With an Element From Array', 'tags': [2, 3, 16, 35]} ,
{'name': 'Largest Subarray Length K', 'tags': [0, 3, 9]} ,
{'name': 'Biggest Window Between Visits', 'tags': [1, 12]} ,
{'name': 'Maximum Units on a Truck', 'tags': [0, 3, 9, 8]} ,
{'name': 'Count Good Meals', 'tags': [1, 3, 5]} ,
{'name': 'Ways to Split Array Into Three Subarrays', 'tags': [1, 3, 17, 11]} ,
{'name': 'Minimum Operations to Make a Subsequence', 'tags': [2, 3, 5, 11]} ,
{'name': 'Sum Of Special Evenly-Spaced Elements In Array', 'tags': [2, 3, 6]} ,
{'name': 'Count Apples and Oranges', 'tags': [1, 12]} ,
{'name': 'Calculate Money in Leetcode Bank', 'tags': [0, 7]} ,
{'name': 'Maximum Score From Removing Substrings', 'tags': [1, 4, 22, 9]} ,
{'name': 'Construct the Lexicographically Largest Valid Sequence', 'tags': [1, 3, 28]} ,
{'name': 'Number Of Ways To Reconstruct A Tree', 'tags': [2, 15, 23]} ,
{'name': 'Decode XORed Array', 'tags': [0, 3, 16]} ,
{'name': 'Swapping Nodes in a Linked List', 'tags': [1, 30, 17]} ,
{'name': 'Minimize Hamming Distance After Swap Operations', 'tags': [1, 3, 10, 29]} ,
{'name': 'Find Minimum Time to Finish All Jobs', 'tags': [2, 3, 6]} ,
{'name': 'Checking Existence of Edge Length Limited Paths II', 'tags': [2, 29, 23]} ,
{'name': 'Number Of Rectangles That Can Form The Largest Square', 'tags': [0, 3]} ,
{'name': 'Tuple with Same Product', 'tags': [1, 3, 5, 24]} ,
{'name': 'Largest Submatrix With Rearrangements', 'tags': [1, 3, 9, 8]} ,
{'name': 'Cat and Mouse II', 'tags': [2, 3, 7]} ,
{'name': 'Find Followers Count', 'tags': [0, 12]} ,
{'name': 'Shortest Path to Get Food', 'tags': [1, 3, 14, 13]} ,
{'name': 'The Number of Employees Which Report to Each Employee', 'tags': [0, 12]} ,
{'name': 'Find the Highest Altitude', 'tags': [0, 3, 18]} ,
{'name': 'Minimum Number of People to Teach', 'tags': [1, 3, 5, 9]} ,
{'name': 'Decode XORed Permutation', 'tags': [1, 3, 16]} ,
{'name': 'Count Ways to Make Array With Product', 'tags': [2, 3, 7]} ,
{'name': 'Latest Time by Replacing Hidden Digits', 'tags': [0, 4, 9]} ,
{'name': 'Change Minimum Characters to Satisfy One of Three Conditions', 'tags': [1, 5, 4, 24]} ,
{'name': 'Find Kth Largest XOR Coordinate Value', 'tags': [1, 3, 40]} ,
{'name': 'Building Boxes', 'tags': [2, 7, 11, 9]} ,
{'name': 'Find Distance in a Binary Tree', 'tags': [1, 5, 15]} ,
{'name': 'Find Total Time Spent by Each Employee', 'tags': [0, 12]} ,
{'name': 'Maximum Number of Balls in a Box', 'tags': [0, 5, 7, 24]} ,
{'name': 'Restore the Array From Adjacent Pairs', 'tags': [1, 3, 5, 10]} ,
{'name': 'Can You Eat Your Favorite Candy on Your Favorite Day?', 'tags': [1, 3, 18]} ,
{'name': 'Palindrome Partitioning IV', 'tags': [2, 4, 6]} ,
{'name': 'Maximum Subarray Sum After One Operation', 'tags': [1, 3, 6]} ,
{'name': 'Leetflex Banned Accounts', 'tags': [1, 12]} ,
{'name': 'Sum of Unique Elements', 'tags': [0, 3, 5, 24]} ,
{'name': 'Maximum Absolute Sum of Any Subarray', 'tags': [1, 3, 6]} ,
{'name': 'Minimum Length of String After Deleting Similar Ends', 'tags': [1, 17, 4]} ,
{'name': 'Maximum Number of Events That Can Be Attended II', 'tags': [2, 3, 11]} ,
{'name': 'Check if Array Is Sorted and Rotated', 'tags': [0, 3]} ,
{'name': 'Maximum Score From Removing Stones', 'tags': [1, 7, 9]} ,
{'name': 'Largest Merge Of Two Strings', 'tags': [1, 17, 4, 9]} ,
{'name': 'Closest Subsequence Sum', 'tags': [2, 3, 17]} ,
{'name': 'Design Most Recently Used Queue', 'tags': [1, 3, 5, 22]} ,
{'name': 'Recyclable and Low Fat Products', 'tags': [0, 12]} ,
{'name': 'Minimum Changes To Make Alternating Binary String', 'tags': [0, 4]} ,
{'name': 'Count Number of Homogenous Substrings', 'tags': [1, 7, 4]} ,
{'name': 'Minimum Limit of Balls in a Bag', 'tags': [1, 3, 11]} ,
{'name': 'Minimum Degree of a Connected Trio in a Graph', 'tags': [2, 23]} ,
{'name': 'Buildings With an Ocean View', 'tags': [1, 3, 22, 33]} ,
{'name': 'Longest Nice Substring', 'tags': [0, 5, 4]} ,
{'name': 'Form Array by Concatenating Subarrays of Another Array', 'tags': [1, 3, 17, 9]} ,
{'name': 'Map of Highest Peak', 'tags': [1, 3, 14, 13]} ,
{'name': 'Tree of Coprimes', 'tags': [2, 3, 7, 15]} ,
{'name': 'Find the Subtasks That Did Not Execute', 'tags': [2, 12]} ,
{'name': 'Merge Strings Alternately', 'tags': [0, 17, 4]} ,
{'name': 'Minimum Number of Operations to Move All Balls to Each Box', 'tags': [1, 3, 4, 18]} ,
{'name': 'Maximum Score from Performing Multiplication Operations', 'tags': [2, 3, 6]} ,
{'name': 'Maximize Palindrome Length From Subsequences', 'tags': [2, 4, 6]} ,
{'name': 'Sort Features by Popularity', 'tags': [1, 3, 5, 4]} ,
{'name': 'Count Items Matching a Rule', 'tags': [0, 3, 4]} ,
{'name': 'Closest Dessert Cost', 'tags': [1, 3, 6]} ,
{'name': 'Equal Sum Arrays With Minimum Number of Operations', 'tags': [1, 3, 5, 9]} ,
{'name': 'Car Fleet II', 'tags': [2, 3, 7, 22]} ,
{'name': "Product's Price for Each Store", 'tags': [0, 12]} ,
{'name': 'Shortest Path in a Hidden Grid', 'tags': [1, 10]} ,
{'name': 'Find Nearest Point That Has the Same X or Y Coordinate', 'tags': [0, 3]} ,
{'name': 'Check if Number is a Sum of Powers of Three', 'tags': [1, 7]} ,
{'name': 'Sum of Beauty of All Substrings', 'tags': [1, 5, 4, 24]} ,
{'name': 'Count Pairs Of Nodes', 'tags': [2, 3, 17, 11]} ,
{'name': 'Grand Slam Titles', 'tags': [1, 12]} ,
{'name': 'Check if Binary String Has at Most One Segment of Ones', 'tags': [0, 4]} ,
{'name': 'Minimum Elements to Add to Form a Given Sum', 'tags': [1, 3, 9]} ,
{'name': 'Number of Restricted Paths From First to Last Node', 'tags': [1, 6, 23]} ,
{'name': 'Make the XOR of All Segments Equal to Zero', 'tags': [2, 3, 6]} ,
{'name': 'Maximize the Beauty of the Garden', 'tags': [2, 3, 5, 9]} ,
{'name': 'Primary Department for Each Employee', 'tags': [0, 12]} ,
{'name': 'Check if One String Swap Can Make Strings Equal', 'tags': [0, 5, 4, 24]} ,
{'name': 'Find Center of Star Graph', 'tags': [0, 23]} ,
{'name': 'Maximum Average Pass Ratio', 'tags': [1, 3, 9]} ,
{'name': 'Maximum Score of a Good Subarray', 'tags': [2, 3, 17, 11]} ,
{'name': 'Count Pairs of Equal Substrings With Minimum Difference', 'tags': [1, 5, 4, 9]} ,
{'name': 'Rearrange Products Table', 'tags': [0, 12]} ,
{'name': 'Second Largest Digit in a String', 'tags': [0, 5, 4]} ,
{'name': 'Design Authentication Manager', 'tags': [1, 5, 30, 26]} ,
{'name': 'Maximum Number of Consecutive Values You Can Make', 'tags': [1, 3, 9, 8]} ,
{'name': 'Maximize Score After N Operations', 'tags': [2, 3, 7]} ,
{'name': 'Maximum Ascending Subarray Sum', 'tags': [0, 3]} ,
{'name': 'Number of Orders in the Backlog', 'tags': [1, 3, 20]} ,
{'name': 'Maximum Value at a Given Index in a Bounded Array', 'tags': [1, 11, 9]} ,
{'name': 'Count Pairs With XOR in a Range', 'tags': [2, 3, 16, 35]} ,
{'name': 'Implement Trie II (Prefix Tree)', 'tags': [1, 5, 4, 26]} ,
{'name': 'Number of Different Integers in a String', 'tags': [0, 5, 4]} ,
{'name': 'Minimum Number of Operations to Reinitialize a Permutation', 'tags': [1, 3, 7, 20]} ,
{'name': 'Evaluate the Bracket Pairs of a String', 'tags': [1, 3, 5, 4]} ,
{'name': 'Maximize Number of Nice Divisors', 'tags': [2, 7, 39, 32]} ,
{'name': 'Ad-Free Sessions', 'tags': [0, 12]} ,
{'name': 'Minimum Path Cost in a Hidden Grid', 'tags': [1, 10]} ,
{'name': 'Find Interview Candidates', 'tags': [1, 12]} ,
{'name': 'Determine Color of a Chessboard Square', 'tags': [0, 7, 4]} ,
{'name': 'Sentence Similarity III', 'tags': [1, 3, 17, 4]} ,
{'name': 'Count Nice Pairs in an Array', 'tags': [1, 3, 5, 7]} ,
{'name': 'Maximum Number of Groups Getting Fresh Donuts', 'tags': [2, 3, 6]} ,
{'name': 'Truncate Sentence', 'tags': [0, 3, 4]} ,
{'name': 'Finding the Users Active Minutes', 'tags': [1, 3, 5]} ,
{'name': 'Minimum Absolute Sum Difference', 'tags': [1, 3, 11, 8]} ,
{'name': 'Number of Different Subsequences GCDs', 'tags': [2, 3, 7, 24]} ,
{'name': 'Maximum Number of Accepted Invitations', 'tags': [1, 3, 10, 23]} ,
{'name': 'Find Customers With Positive Revenue this Year', 'tags': [0, 12]} ,
{'name': 'Sign of the Product of an Array', 'tags': [0, 3, 7]} ,
{'name': 'Find the Winner of the Circular Game', 'tags': [1, 3, 7, 39]} ,
{'name': 'Minimum Sideway Jumps', 'tags': [1, 3, 6, 9]} ,
{'name': 'Finding MK Average', 'tags': [2, 26, 38]} ,
{'name': 'Faulty Sensor', 'tags': [0, 3, 17]} ,
{'name': 'Minimum Operations to Make the Array Increasing', 'tags': [0, 3, 9]} ,
{'name': 'Queries on Number of Points Inside a Circle', 'tags': [1, 3, 7, 43]} ,
{'name': 'Maximum XOR for Each Query', 'tags': [1, 3, 16, 18]} ,
{'name': 'Minimum Number of Operations to Make String Sorted', 'tags': [2, 7, 4, 36]} ,
{'name': 'Maximum Transaction Each Day', 'tags': [1, 12]} ,
{'name': 'Check if the Sentence Is Pangram', 'tags': [0, 5, 4]} ,
{'name': 'Maximum Ice Cream Bars', 'tags': [1, 3, 9, 8]} ,
{'name': 'Single-Threaded CPU', 'tags': [1, 3, 8]} ,
{'name': 'Find XOR Sum of All Pairs Bitwise AND', 'tags': [2, 3, 7, 16]} ,
{'name': 'Remove Duplicates From an Unsorted Linked List', 'tags': [1, 5, 30]} ,
{'name': 'Sum of Digits in Base K', 'tags': [0, 7]} ,
{'name': 'Frequency of the Most Frequent Element', 'tags': [1, 3, 11, 9]} ,
{'name': 'Longest Substring Of All Vowels in Order', 'tags': [1, 4, 25]} ,
{'name': 'Maximum Building Height', 'tags': [2, 3, 7, 8]} ,
{'name': 'League Statistics', 'tags': [1, 12]} ,
{'name': 'Next Palindrome Using Same Digits', 'tags': [2, 17, 4]} ,
{'name': 'Suspicious Bank Accounts', 'tags': [1, 12]} ,
{'name': 'Replace All Digits with Characters', 'tags': [0, 4]} ,
{'name': 'Seat Reservation Manager', 'tags': [1, 26]} ,
{'name': 'Maximum Element After Decreasing and Rearranging', 'tags': [1, 3, 9, 8]} ,
{'name': 'Closest Room', 'tags': [2, 3, 11, 8]} ,
{'name': 'Minimum Distance to the Target Element', 'tags': [0, 3]} ,
{'name': 'Splitting a String Into Descending Consecutive Values', 'tags': [1, 4, 28]} ,
{'name': 'Minimum Adjacent Swaps to Reach the Kth Smallest Number', 'tags': [1, 17, 4, 9]} ,
{'name': 'Minimum Interval to Include Each Query', 'tags': [2, 3, 11, 65]} ,
{'name': 'Distinct Numbers in Each Subarray', 'tags': [1, 3, 5, 25]} ,
{'name': 'Convert Date Format', 'tags': [0, 12]} ,
{'name': 'Maximum Population Year', 'tags': [0, 3, 24, 18]} ,
{'name': 'Maximum Distance Between a Pair of Values', 'tags': [1, 3, 17, 11]} ,
{'name': 'Maximum Subarray Min-Product', 'tags': [1, 3, 22, 33]} ,
{'name': 'Largest Color Value in a Directed Graph', 'tags': [2, 5, 6]} ,
{'name': 'Longest Word With All Prefixes', 'tags': [1, 10, 35]} ,
{'name': 'Sorting the Sentence', 'tags': [0, 4, 8]} ,
{'name': 'Incremental Memory Leak', 'tags': [1, 7, 20]} ,
{'name': 'Rotating the Box', 'tags': [1, 3, 17, 13]} ,
{'name': 'Sum of Floored Pairs', 'tags': [2, 3, 7, 11]} ,
{'name': 'Sum of All Subset XOR Totals', 'tags': [0, 3, 7, 28]} ,
{'name': 'Minimum Number of Swaps to Make the Binary String Alternating', 'tags': [1, 4, 9]} ,
{'name': 'Finding Pairs With a Certain Sum', 'tags': [1, 3, 5, 26]} ,
{'name': 'Number of Ways to Rearrange Sticks With K Sticks Visible', 'tags': [2, 7, 6]} ,
{'name': 'Orders With Maximum Quantity Above Average', 'tags': [1, 12]} ,
{'name': 'Product of Two Run-Length Encoded Arrays', 'tags': [1, 3, 17]} ,
{'name': 'Longer Contiguous Segments of Ones than Zeros', 'tags': [0, 4]} ,
{'name': 'Minimum Speed to Arrive on Time', 'tags': [1, 3, 11]} ,
{'name': 'Jump Game VII', 'tags': [1, 4, 6]} ,
{'name': 'Stone Game VIII', 'tags': [2, 3, 7]} ,
{'name': 'Calculate Special Bonus', 'tags': [0, 12]} ,
{'name': 'Minimize Product Sum of Two Arrays', 'tags': [1, 3, 9, 8]} ,
{'name': 'Group Employees of the Same Salary', 'tags': [1, 12]} ,
{'name': 'Substrings of Size Three with Distinct Characters', 'tags': [0, 5, 4]} ,
{'name': 'Minimize Maximum Pair Sum in Array', 'tags': [1, 3, 17, 9]} ,
{'name': 'Get Biggest Three Rhombus Sums in a Grid', 'tags': [1, 3, 7, 8]} ,
{'name': 'Minimum XOR Sum of Two Arrays', 'tags': [2, 3, 6]} ,
{'name': 'Check if Word Equals Summation of Two Words', 'tags': [0, 4]} ,
{'name': 'Maximum Value after Insertion', 'tags': [1, 4, 9]} ,
{'name': 'Process Tasks Using Servers', 'tags': [1, 3]} ,
{'name': 'Minimum Skips to Arrive at Meeting On Time', 'tags': [2, 3, 6]} ,
{'name': 'Egg Drop With 2 Eggs and N Floors', 'tags': [1, 7, 6]} ,
{'name': 'Count Pairs in Two Arrays', 'tags': [1, 3, 17, 11]} ,
{'name': 'Determine Whether Matrix Can Be Obtained By Rotation', 'tags': [0, 3, 13]} ,
{'name': 'Reduction Operations to Make the Array Elements Equal', 'tags': [1, 3, 8]} ,
{'name': 'Minimum Number of Flips to Make the Binary String Alternating', 'tags': [1, 4, 6]} ,
{'name': 'Minimum Space Wasted From Packaging', 'tags': [2, 3, 11, 8]} ,
{'name': 'The Latest Login in 2020', 'tags': [0, 12]} ,
{'name': 'Cutting Ribbons', 'tags': [1, 3, 11]} ,
{'name': 'Page Recommendations II', 'tags': [2, 12]} ,
{'name': 'Check if All the Integers in a Range Are Covered', 'tags': [0, 3, 5, 18]} ,
{'name': 'Find the Student that Will Replace the Chalk', 'tags': [1, 3, 11, 20]} ,
{'name': 'Largest Magic Square', 'tags': [1, 3, 13, 18]} ,
{'name': 'Minimum Cost to Change the Final Value of Expression', 'tags': [2, 7, 4]} ,
{'name': 'Redistribute Characters to Make All Strings Equal', 'tags': [0, 5, 4, 24]} ,
{'name': 'Maximum Number of Removable Characters', 'tags': [1, 3, 17, 4]} ,
{'name': 'Merge Triplets to Form Target Triplet', 'tags': [1, 3, 9]} ,
{'name': 'The Earliest and Latest Rounds Where Players Compete', 'tags': [2, 6, 41]} ,
{'name': 'Find a Peak Element II', 'tags': [1, 3, 11, 13]} ,
{'name': 'Depth of BST Given Insertion Order', 'tags': [1, 3, 15, 44]} ,
{'name': 'Largest Odd Number in String', 'tags': [0, 7, 4, 9]} ,
{'name': 'The Number of Full Rounds You Have Played', 'tags': [1, 7, 4]} ,
{'name': 'Count Sub Islands', 'tags': [1, 3, 10]} ,
{'name': 'Minimum Absolute Difference Queries', 'tags': [1, 3, 5]} ,
{'name': 'Count Salary Categories', 'tags': [1, 12]} ,
{'name': 'Game of Nim', 'tags': [1, 3, 7]} ,
{'name': 'Remove One Element to Make the Array Strictly Increasing', 'tags': [0, 3]} ,
{'name': 'Remove All Occurrences of a Substring', 'tags': [1, 4, 22, 20]} ,
{'name': 'Maximum Alternating Subsequence Sum', 'tags': [1, 3, 6]} ,
{'name': 'Design Movie Rental System', 'tags': [2, 3, 5, 26]} ,
{'name': 'Maximum Product Difference Between Two Pairs', 'tags': [0, 3, 8]} ,
{'name': 'Cyclically Rotating a Grid', 'tags': [1, 3, 13, 20]} ,
{'name': 'Number of Wonderful Substrings', 'tags': [1, 5, 4]} ,
{'name': 'Count Ways to Build Rooms in an Ant Colony', 'tags': [2, 7, 6]} ,
{'name': 'Leetcodify Friends Recommendations', 'tags': [2, 12]} ,
{'name': 'Kth Smallest Subarray Sum', 'tags': [1, 3, 11, 25]} ,
{'name': 'Leetcodify Similar Friends', 'tags': [2, 12]} ,
{'name': 'Build Array from Permutation', 'tags': [0, 3, 20]} ,
{'name': 'Eliminate Maximum Number of Monsters', 'tags': [1, 3, 9, 8]} ,
{'name': 'Count Good Numbers', 'tags': [2, 3, 9, 14, 39]} ,
{'name': 'Longest Common Subpath', 'tags': [2, 3, 11, 49]} ,
{'name': 'Erect the Fence II', 'tags': [2, 3, 7, 43]} ,
{'name': 'Count Square Sum Triples', 'tags': [0, 7, 27]} ,
{'name': 'Nearest Exit from Entrance in Maze', 'tags': [1, 3, 14, 13]} ,
{'name': 'Sum Game', 'tags': [1, 7, 4, 9]} ,
{'name': 'Minimum Cost to Reach Destination in Time', 'tags': [2, 3, 6, 23]} ,
{'name': 'Concatenation of Array', 'tags': [0, 3, 20]} ,
{'name': 'Unique Length-3 Palindromic Subsequences', 'tags': [1, 5, 4]} ,
{'name': 'Painting a Grid With Three Different Colors', 'tags': [2, 6]} ,
{'name': 'Merge BSTs to Create Single BST', 'tags': [2, 5, 11, 15]} ,
{'name': 'Check if String Is Decomposable Into Value-Equal Substrings', 'tags': [0, 4]} ,
{'name': 'Confirmation Rate', 'tags': [1, 12]} ,
{'name': 'Maximum Number of Words You Can Type', 'tags': [0, 5, 4]} ,
{'name': 'Add Minimum Number of Rungs', 'tags': [1, 3, 9]} ,
{'name': 'Maximum Number of Points with Cost', 'tags': [1, 3, 6, 13]} ,
{'name': 'Maximum Genetic Difference Query', 'tags': [2, 3, 5]} ,
{'name': 'Users That Actively Request Confirmation Messages', 'tags': [0, 12]} ,
{'name': 'Longest Common Subsequence Between Sorted Arrays', 'tags': [1, 3, 5, 24]} ,
{'name': 'Check if All Characters Have Equal Number of Occurrences', 'tags': [0, 5, 4, 24]} ,
{'name': 'The Number of the Smallest Unoccupied Chair', 'tags': [1, 3, 5]} ,
{'name': 'Describe the Painting', 'tags': [1, 3, 5, 8]} ,
{'name': 'Number of Visible People in a Queue', 'tags': [2, 3, 22, 33]} ,
{'name': 'Sum of Digits of String After Convert', 'tags': [0, 4, 20]} ,
{'name': 'Largest Number After Mutating Substring', 'tags': [1, 3, 4, 9]} ,
{'name': 'Maximum Compatibility Score Sum', 'tags': [1, 3, 6]} ,
{'name': 'Delete Duplicate Folders in System', 'tags': [2, 3, 5, 4]} ,
{'name': 'Strong Friendship', 'tags': [1, 12]} ,
{'name': 'Maximum of Minimum Values in All Subarrays', 'tags': [1, 3, 22, 33]} ,
{'name': 'All the Pairs With the Maximum Number of Common Followers', 'tags': [1, 12]} ,
{'name': 'Three Divisors', 'tags': [0, 7, 27, 32]} ,
{'name': 'Maximum Number of Weeks for Which You Can Work', 'tags': [1, 3, 9]} ,
{'name': 'Minimum Garden Perimeter to Collect Enough Apples', 'tags': [1, 7, 11]} ,
{'name': 'Count Number of Special Subsequences', 'tags': [2, 3, 6]} ,
{'name': 'Minimum Time For K Virus Variants to Spread', 'tags': [2, 3, 7, 11]} ,
{'name': 'Delete Characters to Make Fancy String', 'tags': [0, 4]} ,
{'name': 'Check if Move is Legal', 'tags': [1, 3, 13, 27]} ,
{'name': 'Minimum Total Space Wasted With K Resizing Operations', 'tags': [1, 3, 6]} ,
{'name': 'Maximum Product of the Length of Two Palindromic Substrings', 'tags': [2, 4, 49, 45]} ,
{'name': 'Check If String Is a Prefix of Array', 'tags': [0, 3, 17, 4]} ,
{'name': 'Remove Stones to Minimize the Total', 'tags': [1, 3, 9]} ,
{'name': 'Minimum Number of Swaps to Make the String Balanced', 'tags': [1, 17, 4, 22]} ,
{'name': 'Find the Longest Valid Obstacle Course at Each Position', 'tags': [2, 3, 11, 42]} ,
{'name': 'Employees With Missing Information', 'tags': [0, 12]} ,
{'name': 'Binary Searchable Numbers in an Unsorted Array', 'tags': [1, 3, 11]} ,
{'name': 'Number of Strings That Appear as Substrings in Word', 'tags': [0, 3, 4]} ,
{'name': 'Array With Elements Not Equal to Average of Neighbors', 'tags': [1, 3, 9, 8]} ,
{'name': 'Minimum Non-Zero Product of the Array Elements', 'tags': [1, 7, 9, 39]} ,
{'name': 'Last Day Where You Can Still Cross', 'tags': [2, 3, 11]} ,
{'name': 'Find if Path Exists in Graph', 'tags': [0, 10]} ,
{'name': 'First and Last Call On the Same Day', 'tags': [2, 12]} ,
{'name': 'Count Nodes Equal to Sum of Descendants', 'tags': [1, 15, 10, 21]} ,
{'name': 'Minimum Time to Type Word Using Special Typewriter', 'tags': [0, 4, 9]} ,
{'name': 'Maximum Matrix Sum', 'tags': [1, 3, 9, 13]} ,
{'name': 'Number of Ways to Arrive at Destination', 'tags': [1, 6, 23]} ,
{'name': 'Number of Ways to Separate Numbers', 'tags': [2, 4, 6]} ,
{'name': 'Employees Whose Manager Left the Company', 'tags': [0, 12]} ,
{'name': 'Find Greatest Common Divisor of Array', 'tags': [0, 3, 7, 32]} ,
{'name': 'Find Unique Binary String', 'tags': [1, 3, 5, 4]} ,
{'name': 'Minimize the Difference Between Target and Chosen Elements', 'tags': [1, 3, 6, 13]} ,
{'name': 'Find Array Given Subset Sums', 'tags': [2, 3, 40]} ,
{'name': 'Widest Pair of Indices With Equal Range Sum', 'tags': [1, 3, 5, 18]} ,
{'name': 'Minimum Difference Between Highest and Lowest of K Scores', 'tags': [0, 3, 25, 8]} ,
{'name': 'Find the Kth Largest Integer in the Array', 'tags': [1, 3, 4, 40]} ,
{'name': 'Minimum Number of Work Sessions to Finish the Tasks', 'tags': [1, 3, 6]} ,
{'name': 'Number of Unique Good Subsequences', 'tags': [2, 4, 6]} ,
{'name': 'Find Cutoff Score for Each School', 'tags': [1, 12]} ,
{'name': 'Maximum Number of People That Can Be Caught in Tag', 'tags': [1, 3, 9]} ,
{'name': 'Count the Number of Experiments', 'tags': [1, 12]} ,
{'name': 'Find the Middle Index in Array', 'tags': [0, 3, 18]} ,
{'name': 'Find All Groups of Farmland', 'tags': [1, 3, 10]} ,
{'name': 'Operations on Tree', 'tags': [1, 3, 5, 15]} ,
{'name': 'The Number of Good Subsets', 'tags': [2, 3, 7]} ,
{'name': 'Count Special Quadruplets', 'tags': [0, 3, 5, 27]} ,
{'name': 'The Number of Weak Characters in the Game', 'tags': [1, 3, 22, 9]} ,
{'name': 'First Day Where You Have Been in All the Rooms', 'tags': [1, 3, 6]} ,
{'name': 'GCD Sort of an Array', 'tags': [2, 3, 7, 29]} ,
{'name': 'Smallest Greater Multiple Made of Two Digits', 'tags': [1, 7, 27]} ,
{'name': 'Reverse Prefix of Word', 'tags': [0, 17, 4, 22]} ,

];